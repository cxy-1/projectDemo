package com.sugon.analysis.service;import com.deepoove.poi.data.CellRenderData;import com.deepoove.poi.data.RowRenderData;import com.deepoove.poi.data.style.Style;import com.deepoove.poi.policy.DynamicTableRenderPolicy;import com.deepoove.poi.policy.MiniTableRenderPolicy;import org.apache.poi.xwpf.usermodel.XWPFTable;import org.apache.poi.xwpf.usermodel.XWPFTableRow;import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTBorder;import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTTblBorders;import org.openxmlformats.schemas.wordprocessingml.x2006.main.STBorder;import java.math.BigInteger;import java.util.List;/** * @description: 自定义表格填充策略 * @author: liuwei * @create: 2020-04-27 20:45 **/public class DetailTablePolicy extends DynamicTableRenderPolicy {    // 填充的起始行,    // 注意：行号从0开始    private int row = 1;// 默认从第一行开始    public int getRow() {        return row;    }    public void setRow(int row) {        this.row = row;    }    public DetailTablePolicy() {    }    public DetailTablePolicy(int row) {        this.row = row;    }    @Override    public void render(XWPFTable table, Object data) {        if (null == data) return;        // 对应渲染的表格数据        List<RowRenderData> table2RenderData = (List<RowRenderData>) data;        // 删除当前起始行        table.removeRow(row);        // 插入每一行        for (int i = 0,len = table2RenderData.size(); i < len; i++) {            XWPFTableRow insertNewTableRow = table.insertNewTableRow(row+i);            RowRenderData rowRenderData = table2RenderData.get(i);            for (CellRenderData textRenderData : rowRenderData.getCells()) {                Style style = new Style();                style.setFontSize(9);                style.setFontFamily("方正仿宋_GBK");                textRenderData.getCellText().setStyle(style);            }            for (int j = 0,len2 = rowRenderData.size(); j < len2; j++) insertNewTableRow.createCell();            // 渲染每一行数据            MiniTableRenderPolicy.Helper.renderRow(table, row + i, rowRenderData);        }        CTTblBorders borders=table.getCTTbl().getTblPr().addNewTblBorders();        CTBorder boader=borders.addNewInsideH();        boader.setVal(STBorder.SINGLE);        boader.setSz(new BigInteger("1"));        boader.setColor("000000");        boader = borders.addNewInsideV();        boader.setVal(STBorder.SINGLE);        boader.setSz(new BigInteger("1"));        boader.setColor("000000");        boader = borders.addNewBottom();        boader.setVal(STBorder.SINGLE);        boader.setSz(new BigInteger("1"));        boader.setColor("000000");        boader = borders.addNewLeft();        boader.setVal(STBorder.SINGLE);        boader.setSz(new BigInteger("1"));        boader.setColor("000000");        boader = borders.addNewRight();        boader.setVal(STBorder.SINGLE);        boader.setSz(new BigInteger("1"));        boader.setColor("000000");    }}