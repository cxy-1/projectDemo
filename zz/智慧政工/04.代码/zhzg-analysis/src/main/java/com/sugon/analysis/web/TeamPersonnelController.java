package com.sugon.analysis.web;import com.sugon.analysis.domain.data.query.QuerySearchVo;import com.sugon.analysis.domain.data.query.UnitDescription;import com.sugon.analysis.domain.param.DeptAndType;import com.sugon.analysis.domain.param.PersonstereoDetailVo;import com.sugon.analysis.domain.view.personstereo.ResultSourceVo;import com.sugon.analysis.enums.result.ResultModel;import com.sugon.analysis.service.PerComparisonService;import com.sugon.analysis.service.PersonStereoService;import com.sugon.analysis.util.CommonUnit;import io.swagger.annotations.ApiOperation;import io.swagger.annotations.ApiParam;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletResponse;import static com.sugon.analysis.enums.ResponsesStatus.PARAMERROR;import static com.sugon.analysis.enums.ResponsesStatus.PARAMSPECIAL;/** * @author: create by huangxb * @version: v1.0 * @description: * @date:2019/10/28 */@RestController@RequestMapping("/teamPerson")@Slf4jpublic class TeamPersonnelController {    @Resource    private PersonStereoService personStereoService;    @Resource    private PerComparisonService perComparisonService;    /**     * 人员立体刨析     *     * @param deptAndType     * @return     */    //这里面能获取分局和部门id之类的    @CrossOrigin    @ApiOperation(value = "人员立体", notes = "人员立体解剖")    @RequestMapping(value = "/personStereo", method = RequestMethod.POST)    public ResultModel personStereo(@RequestBody DeptAndType deptAndType) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(deptAndType.getIdNumber())) {            resultModel.setResult(personStereoService.getPersonStereoInfo(deptAndType));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 单位分析描述语句     *     * @param unitId     * @return     */    @CrossOrigin    @ApiOperation(value = "单位描述", notes = "单位分析数据")    @ApiParam(name = "unitId", required = true, value = "单位Id", defaultValue = "320114196610232446")    @RequestMapping(value = "/personStereo", method = RequestMethod.GET)    public ResultModel unitDescription(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            UnitDescription unitDescription = personStereoService.getUnitDescription(unitId);            resultModel.setResult(unitDescription);        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 单位来源分析     *     * @param unitId     * @return     */    @CrossOrigin    @ApiOperation(value = "单位来源分析", notes = "单位进入来源分析")    @ApiParam(name = "unitId", required = true, value = "单位Id", defaultValue = "2014111018472522300000002936")    @RequestMapping(value = "/unitSource", method = RequestMethod.GET)    public ResultModel unitSource(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            ResultSourceVo unitSourceVoList = personStereoService.getSourceCount(unitId);            resultModel.setResult(unitSourceVoList);        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 单位来源详情     *     * @param personstereoDetailVo     * @return     */    @CrossOrigin    @ApiOperation(value = "单位来源详情", notes = "单位进入来源详情")    @RequestMapping(value = "/unitSourceDetail", method = RequestMethod.POST)    public ResultModel unitSourceDetail(@RequestBody PersonstereoDetailVo personstereoDetailVo) {        ResultModel resultModel = new ResultModel();        if (personstereoDetailVo != null) {            if("1".equals(personstereoDetailVo.getIsDownload())) {                personStereoService.getUnitSourceDetail(personstereoDetailVo);            }else{                return personStereoService.getUnitSourceDetail(personstereoDetailVo);            }        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 年龄分析     *     * @param unitId     * @return     */    @CrossOrigin    @ApiOperation(value = "年龄分析", notes = "单位年龄分析")    @ApiParam(name = "unitId", required = true, value = "单位Id", defaultValue = "2014111018472522300000002936")    @RequestMapping(value = "/unitAgeCount", method = RequestMethod.GET)    public ResultModel unitAgeCount(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            resultModel.setResult(personStereoService.getAgeCount(unitId));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    @CrossOrigin    @ApiOperation(value = "年龄详情", notes = "单位年龄分析详情")    @RequestMapping(value = "/unitAgeDetail", method = RequestMethod.POST)    public ResultModel unitAgeDetail(@RequestBody PersonstereoDetailVo personstereoDetailVo) {        ResultModel resultModel = new ResultModel();        if (personstereoDetailVo != null) {            resultModel.setResult(personStereoService.getAgeDetails(personstereoDetailVo));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 学历分析     *     * @param unitId     * @return     */    @CrossOrigin    @ApiOperation(value = "学历分析", notes = "单位人员学历分析")    @ApiParam(name = "unitId", required = true, value = "单位Id", defaultValue = "2014111018472522300000002936")    @RequestMapping(value = "/unitEducationCount", method = RequestMethod.GET)    public ResultModel unitEducationCount(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            resultModel.setResult(personStereoService.getEducationCount(unitId));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 单位学历分析详情     * @param personstereoDetailVo     * @return     */    @CrossOrigin    @ApiOperation(value = "学历分析详情", notes = "单位人员学历分析详情")    @RequestMapping(value = "/unitEducationDetail", method = RequestMethod.POST)    public ResultModel unitEducationDetail(@RequestBody PersonstereoDetailVo personstereoDetailVo) {        ResultModel resultModel = new ResultModel();        if (personstereoDetailVo != null) {            resultModel.setResult(personStereoService.getEducationDetails(personstereoDetailVo));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 年限分析     *     * @param unitId     * @return     */    @CrossOrigin    @ApiOperation(value = "年限分析", notes = "单位工作年限分析")    @ApiParam(name = "unitId", required = true, value = "单位Id", defaultValue = "2014111018472522300000002936")    @RequestMapping(value = "/unitWorkAgeCount", method = RequestMethod.GET)    public ResultModel unitWorkAgeCount(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            resultModel.setResult(personStereoService.getWorkAgeCount(unitId));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 根据入警年限查询详情     * @param personstereoDetailVo     * @return     */    @CrossOrigin    @ApiOperation(value = "年限分析详情", notes = "年限分析详情")    @RequestMapping(value = "/unitWorkAgeDetail", method = RequestMethod.POST)    public ResultModel unitWorkAgeDetail(@RequestBody PersonstereoDetailVo personstereoDetailVo) {        ResultModel resultModel = new ResultModel();        if (personstereoDetailVo != null) {            resultModel.setResult(personStereoService.getUnitWorkAgeDetail(personstereoDetailVo));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 婚姻分析     * @param unitId     * @return     */    @CrossOrigin    @ApiOperation(value = "婚姻分析", notes = "单位婚姻分析")    @ApiParam(name = "unitId", required = true, value = "单位Id", defaultValue = "2014111018472522300000002936")    @RequestMapping(value = "/unitMaritalCount", method = RequestMethod.GET)    public ResultModel unitMaritalCount(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            resultModel.setResult(personStereoService.getMaritalCount(unitId));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 年限分析详情     * @param personstereoDetailVo     * @return     */    @CrossOrigin    @ApiOperation(value = "年限分析详情", notes = "年限分析详情")    @RequestMapping(value = "/unitMaritalDetail", method = RequestMethod.POST)    public ResultModel unitMaritalDetail(@RequestBody PersonstereoDetailVo personstereoDetailVo) {        ResultModel resultModel = new ResultModel();        if (personstereoDetailVo != null) {            resultModel.setResult(personStereoService.getUnitMaritalDetail(personstereoDetailVo));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 搜索     *     * @param querySearchVo     * @return     */    @CrossOrigin    @RequestMapping(value = "/getSearch", method = RequestMethod.POST)    public ResultModel getSearch(@RequestBody QuerySearchVo querySearchVo) {        ResultModel resultModel = new ResultModel();        if (querySearchVo != null) {            if(CommonUnit.isSpecialChar(querySearchVo.getParam())){                resultModel.setResult(PARAMSPECIAL);            }else {                resultModel.setResult(personStereoService.getSearch(querySearchVo));            }        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 获取考核单元下拉值     *     * @return     */    @CrossOrigin    @RequestMapping(value = "/getPerformanceAppraisal", method = RequestMethod.GET)    public ResultModel getPerformanceAppraisal() {        ResultModel resultModel = new ResultModel();        resultModel.setResult(personStereoService.getPerformanceAppraisal());        return resultModel;    }    /**     * 学校分析     * @param unitId     * @return     */    @CrossOrigin    @ApiOperation(value = "学校分析", notes = "学校分析详情")    @RequestMapping(value = "/schoolCount", method = RequestMethod.GET)    public ResultModel schoolCount(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            resultModel.setResult(personStereoService.getSchoolCount(unitId));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    @CrossOrigin    @ApiOperation(value = "学校分析详情", notes = "学校分析详情")    @RequestMapping(value = "/schoolDeatil", method = RequestMethod.POST)    public ResultModel schoolDeatil(@RequestBody PersonstereoDetailVo personstereoDetailVo) {        ResultModel resultModel = new ResultModel();        if (personstereoDetailVo !=null) {            resultModel.setResult(personStereoService.getSchoolDetail(personstereoDetailVo));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    //主要    @CrossOrigin    @ApiOperation(value = "领导班子明细", notes = "领导班子明细")    @RequestMapping(value = "/getUnitHeadDetail", method = RequestMethod.GET)    public ResultModel getUnitHeadDetail(@RequestParam("unitId") String unitId) {        ResultModel resultModel = new ResultModel();        if (StringUtils.isNotBlank(unitId)) {            //查询出单位领导详情 根据unitId            resultModel.setResult(personStereoService.getUnitHeadDetail(unitId));        } else {            resultModel.setResult(PARAMERROR);        }        return resultModel;    }    /**     * 获取人员图片     * @param idNumber     * @return     */    @CrossOrigin    @ApiOperation(value = "获取图片", notes = "获取人员照片信息")    @RequestMapping(value = "/getFtpImgPath", method = RequestMethod.GET)    public void getImgPath(@RequestParam("idNumber") String idNumber, HttpServletResponse response) {        if (StringUtils.isNotBlank(idNumber)) {            perComparisonService.downloadStream(idNumber, response);        }    }}