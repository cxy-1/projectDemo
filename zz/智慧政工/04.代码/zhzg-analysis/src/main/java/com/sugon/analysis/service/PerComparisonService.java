package com.sugon.analysis.service;import com.sugon.analysis.domain.data.object.oracle.SgQueryCategoryDo;import com.sugon.analysis.domain.data.object.oracle.TPersonDo;import com.sugon.analysis.domain.data.query.*;import com.sugon.analysis.domain.view.persondraw.OpinionAndJcjVo;import com.sugon.analysis.domain.view.return2view.*;import com.sugon.analysis.mappper.oracle.PerComparisonMapper;import com.sugon.analysis.mappper.oracle.PersonalAnalysisMapper;import com.sugon.analysis.repository.oracle.MpersonOpinionDao;import com.sugon.analysis.repository.oracle.SgQueryCategoryDao;import com.sugon.analysis.repository.oracle.TEducationDao;import com.sugon.analysis.repository.oracle.TPersonDao;import com.sugon.analysis.util.ChildUnit;import com.sugon.analysis.util.CommonUnit;import com.sugon.analysis.util.DateUtil;import com.sugon.analysis.util.RoleOfCompany;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.apache.commons.net.ftp.FTPClient;import org.apache.commons.net.ftp.FTPReply;import org.apache.xmlbeans.impl.common.IOUtil;import org.springframework.beans.factory.annotation.Value;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.stereotype.Service;import javax.annotation.Resource;import javax.servlet.http.HttpServletResponse;import java.io.IOException;import java.io.InputStream;import java.util.*;import java.util.stream.Collectors;import static java.util.Comparator.comparing;/** * @author: create by huangxb * @version: v1.0 * @description: * @date:2019/11/5 */@Slf4j@Servicepublic class PerComparisonService extends PersonBaseService {	@Value("${ftpimg.ip}")	private String ftpIp;	@Resource	private PerComparisonMapper perComparisonMapper;	@Resource	private TPersonDao tPersonDao;	@Resource	private PersonalAnalysisMapper personalAnalysisMapper;	@Resource	private SgQueryCategoryDao sgQueryCategoryDao;	@Resource	private MpersonOpinionDao mpersonOpinionDao;	@Resource	private TEducationDao tEducationDao;	@Resource	private SatisfiedDataSevice satisfiedDataSevice;	@Resource(name = "primaryJdbcTemplate")	private JdbcTemplate primaryJdbcTemplate;	private static final String SAME_JOB = "同职位";	private static final String SAME_POLICE_RANK = "同警衔";	private static final String SAME_EDUCATION = "同学历";	private static final String SAME_SOURCE = "同入警来源";	private static final String SAME_AGE = "同年龄";	private static final String SAME_AGE_SCOPE = "同年龄段";	private static final String SAME_TIME_WORK = "同入警年限";	private String[] months = new String[]{"01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12"};	private String[] sourceTypes = new String[]{"警察院校毕业生", "社会招考", "实施公务员法机关调入", "转业及复员军人","其他"};	private String[] social = new String[]{"101", "102", "104", "127", "126", "112", "111", "106", "107", "105", "128"};	private String[] entry = new String[]{"120", "134", "131"};	private String[] soldier = new String[]{"115", "116"};	private String[] ageScopeTypes=new String[]{"30岁以下","30(含)-35岁","35(含)-40岁","40(含)-45岁","45(含)-50岁","50(含)岁以上"};	private String[] timeWorkScope=new String[]{"5年以下","5(含)-10年","10(含)-20年","20(含)-30年","30(含)年以上"};	/**	 * 对比两个民警	 * @param compareAndType	 * @return	 */	public ComparisonTwoVo getCompanyTwoPeople(CompareAndType compareAndType) {		ComparisonTwoVo comparisonTwoVo = new ComparisonTwoVo();		//根据传过来的参数判断显示		if (ONE.equals(compareAndType.getIsDuty())) {			DutyAndYearVo dutyAndYearVo = getJobChangeInfo(compareAndType.getIdNumber());			comparisonTwoVo.setDutyAndYearVo(dutyAndYearVo);		}		//警衔		if (ONE.equals(compareAndType.getIsPoliceRank())) {			PoliceRankAndYearVo policeRankAndYearVo = getPoliceRank(compareAndType.getIdNumber());			comparisonTwoVo.setPoliceRankAndYearVo(policeRankAndYearVo);		}		//奖励		if (ONE.equals(compareAndType.getIsAssess())) {			AssessAndYearVo assessAndYearVo = getAssess(compareAndType.getIdNumber());			comparisonTwoVo.setAssessAndYearVo(assessAndYearVo);		}		if (ONE.equals(compareAndType.getIsOpinion())) {			MyAndMonthVo myAndMonthVo = getMyMyd(compareAndType.getIdNumber(), compareAndType.getYear());			comparisonTwoVo.setMyAndMonthVo(myAndMonthVo);		}		if (ONE.equals(compareAndType.getIsPoliceRank()) || ONE.equals(compareAndType.getIsDuty()) ||				ONE.equals(compareAndType.getIsAssess())) {			//根据入警年限显示横坐标			List<TPersonDo> tPersonDoList = tPersonDao.findMaxAgeTimeWork(compareAndType.getIdNumber());			String startTime = null;			if (tPersonDoList.size() > 0) {				startTime = tPersonDoList.get(0).getTimeToWorkPsb().substring(0, 4);			}			List<String> dateList = new ArrayList<>(DateUtil.getYears(startTime, compareAndType.getYear()));			comparisonTwoVo.setYears(dateList);		}		return comparisonTwoVo;	}	/**	 * @param idNumbers	 * @return	 * @description: 职位变动分析	 */	private DutyAndYearVo getJobChangeInfo(List<String> idNumbers) {		DutyAndYearVo dutyAndYearVo = new DutyAndYearVo();		Map<String, Map<String, String>> dutyMap = new LinkedHashMap<>(10);		if (idNumbers.size() > 0) {			idNumbers.forEach(v -> {				Map<String, String> map = getDutyData(v);				dutyMap.put(v, map);			});		}		List<String> dutyColumn = new ArrayList<>();		for (Map.Entry<String, Map<String, String>> mapEntry : dutyMap.entrySet()) {			dutyColumn.addAll(mapEntry.getValue().values());		}		dutyColumn = dutyColumn.stream().distinct().sorted(new Comparator<String>() {			@Override			public int compare(String o1, String o2) {				int i1 = dutyName.indexOf(o1);				int i2 = dutyName.indexOf(o2);				return i1-i2;			}		}).collect(Collectors.toList());		dutyAndYearVo.setDutyColumn(dutyColumn);		dutyAndYearVo.setDutyMap(dutyMap);		return dutyAndYearVo;	}	/**	 * @param idNumbers	 * @return	 * @description: 警衔晋升	 */	private PoliceRankAndYearVo getPoliceRank(List<String> idNumbers) {		Map<String, Map<String, String>> policeRankMap = new LinkedHashMap<>(10);		PoliceRankAndYearVo policeRankAndYearVo = new PoliceRankAndYearVo();		if (idNumbers.size() > 0) {			idNumbers.forEach(v -> {				Map<String, String> map = getPoliceRankByIdNo(v);				policeRankMap.put(v, map);			});		}		policeRankAndYearVo.setPoliceRankMap(policeRankMap);		List<String> column = new ArrayList<>();		List<SgQueryCategoryDo> sgQueryCategoryDoList = sgQueryCategoryDao.findAllByCvTypeOrderByCvFlagDesc("XA");		sgQueryCategoryDoList.forEach(s -> column.add(s.getCvName()));		List<String> policeRankColumn = new ArrayList<>();		for (Map.Entry<String, Map<String, String>> mapEntry : policeRankMap.entrySet()) {			policeRankColumn.addAll(mapEntry.getValue().values());		}		policeRankColumn = policeRankColumn.stream().distinct().sorted(new Comparator<String>() {			@Override			public int compare(String o1, String o2) {				int i1 = column.indexOf(o1);				int i2 = column.indexOf(o2);				return i1-i2;			}		}).collect(Collectors.toList());		policeRankAndYearVo.setColumn(policeRankColumn);		return policeRankAndYearVo;	}	/**	 * 获取奖励	 *	 * @param idNumbers	 * @return	 */	private AssessAndYearVo getAssess(List<String> idNumbers) {		AssessAndYearVo assessAndYearVo = new AssessAndYearVo();		Map<String, Map<String, Integer>> assessMap = new LinkedHashMap<>(10);		if (idNumbers.size() > 0) {			idNumbers.forEach(v -> {				Map<String, Integer> map = getAssessByIdNo(v);				assessMap.put(v, map);			});		}		assessAndYearVo.setPoliceRankMap(assessMap);		return assessAndYearVo;	}	/**	 * 根据条件查询	 *	 *	 * @param idNumber	 * @param query	 * @return	 */	public List<PersonVo> getPeopleByParams(String idNumber, String query) {		String roleCompanyId = RoleOfCompany.getRoleCompanyId(idNumber);		//根据unitId获取出其对应子部门中的人身份证号码（所有）		ChildUnit childUnit = new ChildUnit();		List<TPersonDo> tPersonDoList = childUnit.getSubPerson(roleCompanyId);		List<PersonVo> personVoList = new ArrayList<>();		if (tPersonDoList.size() > 0) {			personVoList.addAll(listChangPersonVoList(tPersonDoList));		}		if (personVoList.size() > 0) {			if (StringUtils.isNotBlank(query)) {				personVoList = personVoList.						stream().						filter(v -> v.getDeptName() != null && (v.getName().contains(query) || v.getDeptName().contains(query))).						sorted(comparing(PersonVo::getPoliceNo)).						collect(Collectors.toList());			} else {				personVoList = personVoList.						stream().						sorted(comparing(PersonVo::getPoliceNo)).						collect(Collectors.toList());			}		}		return personVoList;	}	/**	 * 把数据库Do转换成前端的Vo	 *	 * @param tPersonDoList	 * @return	 */	private List<PersonVo> listChangPersonVoList(List<TPersonDo> tPersonDoList) {		List<PersonVo> personVoList = new ArrayList<>();		tPersonDoList.forEach(v -> {			PersonVo personVo = new PersonVo();			personVo.setId(v.getId());			personVo.setIdNo(v.getIdNo());			personVo.setName(v.getPersonName());			personVo.setPoliceNo(v.getPoliceNo());			String deptName = v.getOfficeSimpleName() != null ?					v.getOrgSimpleName() + v.getOfficeSimpleName() : v.getOrgSimpleName();			personVo.setDeptName(deptName);			personVoList.add(personVo);		});		return personVoList;	}	/**	 * @param idNo	 * @return	 * @description: 获取某个人的职务数据	 */	private Map<String, String> getDutyData(String idNo) {		String name = "";		List<DutyAndYear> dutyAndYearList = new ArrayList<>(personalAnalysisMapper.				queryDuty(idNo, Arrays.asList(dutys)));		Map<String, String> dutyMap = new LinkedHashMap<>();		//根据身份证号查询民察的入时间		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNo, "0");		String startTime = tPersonDo.getTimeToWorkPsb().substring(0, 4);		String endTime = DateUtil.getCurrentYear();		List<String> dateList = new ArrayList<>(DateUtil.getYears(startTime, endTime));		if (dateList.size() > 0) {//            if (dutyAndYearList.size() > 0) {//                name = mergeDuty(dutyAndYearList.get(0).getCvName());//            }			final String[] finalName = {name};			dateList.forEach(v -> {				if (dutyAndYearList.size() > 0) {					dutyMap.put(v, finalName[0]);					dutyAndYearList.forEach(d -> {						if (v.equals(d.getYear())) {							String identify = mergeDuty(d.getCvName());							dutyMap.put(v, identify);							finalName[0] = identify;						}					});				}			});		}		return dutyMap;	}	/**	 * 根据身份证号查询警衔	 *	 * @param idNo	 * @return	 */	private Map<String, String> getPoliceRankByIdNo(String idNo) {		final String[] name = {""};		Map<String, String> policeRankMap = new LinkedHashMap<>();		//根据身份证号查询民察的参加公安的时间		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNo, "0");		List<String> dateList = new ArrayList<>(DateUtil.getYears(				tPersonDo.getTimeToWorkPsb().substring(0, 4), DateUtil.getCurrentYear()));		List<NameAndTimeInfo> nameAndTimeInfoList = perComparisonMapper.queryPolicebAndTimeInfo(idNo);		dateList.forEach(v -> {			if (nameAndTimeInfoList.size() > 0) {//                name[0] = nameAndTimeInfoList.get(0).getName();				policeRankMap.put(v, name[0]);				nameAndTimeInfoList.forEach(d -> {					if (v.equals(d.getTime())) {						policeRankMap.put(v, d.getName());						name[0] = d.getName();					}				});			}		});		return policeRankMap;	}	/**	 * @param idNo	 * @return	 * @description: 根据身份证获取该人年奖励次数	 */	private Map<String, Integer> getAssessByIdNo(String idNo) {		Map<String, Integer> map = new LinkedHashMap<>();		//查询奖励		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNo, "0");		String startTime = tPersonDo.getTimeToWorkPsb().substring(0, 4);		String endTime = DateUtil.getCurrentYear();		List<String> dateList = new ArrayList<>(DateUtil.getYears(startTime, endTime));		//统计该人获取的奖励		List<YearCount> yearCountList = personalAnalysisMapper.queryTcommenCount(idNo);		dateList.forEach(v -> {			map.put(v, 0);			if (yearCountList.size() > 0) {				yearCountList.forEach(f -> {					if (v.equals(f.getYear())) {						map.put(v, f.getCount());					}				});			}		});		return map;	}	/**	 * @param idNumbers	 * @param year	 * @return	 * @description: 民意满意度	 */	private MyAndMonthVo getMyMyd(List<String> idNumbers, String year) {		MyAndMonthVo myAndMonthVo = new MyAndMonthVo();		Map<String, Map<String, String>> mymydMap = new LinkedHashMap<>(10);		if (idNumbers.size() > 0) {			idNumbers.forEach(v -> {				Map<String, String> map = getMyMydByIdNo(v, year);				mymydMap.put(v, map);			});		}		myAndMonthVo.setMonths(Arrays.asList(months));		myAndMonthVo.setMymydMap(mymydMap);		return myAndMonthVo;	}	/**	 * @param idNo	 * @param year	 * @return	 * @description: 根据人员查询民意满意度	 */	private Map<String, String> getMyMydByIdNo(String idNo, String year) {		Map<String, String> map = new LinkedHashMap<>();		String startTime = year +"01";		int yearQuery = Integer.parseInt(startTime) ;		String endTime = year +"12";		int yearEndQuery = Integer.parseInt(endTime) ;		OpinionAndJcjVo opinionAndJcjVo = satisfiedDataSevice.getJcjAndMylData(idNo,yearQuery,yearEndQuery);		if(opinionAndJcjVo !=null) {			List<OpinionVo> mPersonOpinionDoList = opinionAndJcjVo.getOpinionVoList();			List<String> dateList = Arrays.asList(months);			dateList.forEach(v -> {				map.put(v, "0");				if (mPersonOpinionDoList.size() > 0) {					mPersonOpinionDoList.forEach(f -> {						if (v.equals(f.getMonth())) {							map.put(v, f.getMymyd());						}					});				}			});		}		return map;	}	/**	 * 获取查询条件	 *	 * @param type	 * @return	 */	public SearchParamVo getSearchParam(String type) {		SearchParamVo searchParamVo = new SearchParamVo();		Map<String, List<String>> dutyRankMap = new LinkedHashMap<>();		if (SAME_JOB.equals(type)) {			//获取职务			List<String> duty = removeListEmptyTextBackNewArray(dutyName);			//获取职级			List<String> dutyRank1 = removeListEmptyTextBackNewArray(Arrays.asList(dutyRanks1));			dutyRankMap.put("综合管理", dutyRank1);			List<String> dutyRank2 = removeListEmptyTextBackNewArray(Arrays.asList(dutyRanks2));			dutyRankMap.put("执法勤务", dutyRank2);			List<String> dutyRank3 = removeListEmptyTextBackNewArray(Arrays.asList(dutyRanks3));			dutyRankMap.put("警务技术", dutyRank3);			searchParamVo.setDuty(duty);			searchParamVo.setDutyRank(dutyRankMap);		}		if (SAME_POLICE_RANK.equals(type)) {			List<String> column = new ArrayList<>();			List<SgQueryCategoryDo> sgQueryCategoryDoList = sgQueryCategoryDao.findAllByCvTypeOrderByCvFlagDesc("XA");			sgQueryCategoryDoList.forEach(s -> column.add(s.getCvName()));			searchParamVo.setPoliceRank(column);		}		if (SAME_EDUCATION.equals(type)) {			searchParamVo.setEducation(CommonUnit.education);		}		if (SAME_SOURCE.equals(type)) {			List<String> source = Arrays.asList(sourceTypes);			searchParamVo.setSource(source);		}		if(SAME_AGE_SCOPE.equals(type)){			List<String> ageScopeList = Arrays.asList(ageScopeTypes);			searchParamVo.setAgeScope(ageScopeList);		}		if(SAME_TIME_WORK.equals(type)){			List<String> timeWorkList = Arrays.asList(timeWorkScope);			searchParamVo.setTimeWork(timeWorkList);		}		return searchParamVo;	}	/**	 * 比较两个以上的民警	 *	 * @param compareAndType	 * @return	 * @throws Exception	 */	public List<CompanyTwoMoreVo> getCompanyTwoMore(CompareAndType compareAndType) throws Exception {		List<CompanyTwoMoreVo> companyTwoMoreVoList = new ArrayList<>();		//比较多个民警		if (compareAndType.getIdNumber().size() > 0) {			for (int i = 0; i < compareAndType.getIdNumber().size(); i++) {				String idNo = compareAndType.getIdNumber().get(i);				CompanyTwoMoreVo companyTwoMoreVo = new CompanyTwoMoreVo();				TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(compareAndType.getIdNumber().get(i), "0");				companyTwoMoreVo.setId(i + 1);				companyTwoMoreVo.setName(tPersonDo.getPersonName());				if (tPersonDo.getOfficeSimpleName() != null) {					companyTwoMoreVo.setDeptName(tPersonDo.getOrgSimpleName() + tPersonDo.getOfficeSimpleName());				} else {					companyTwoMoreVo.setDeptName(tPersonDo.getOrgSimpleName());				}				if (tPersonDo.getAge() != null) {					companyTwoMoreVo.setAge(tPersonDo.getAge());				} else {					Date time = DateUtil.parse(tPersonDo.getJoinPartyTime());					int age = DateUtil.getAge(time);					companyTwoMoreVo.setAge(String.valueOf(age));				}				String endTime = compareAndType.getYear() + "12";				String startTime = compareAndType.getYear() + "01";				//查询职务变动表获取职位				List<DutyAndYear> dutyAndYearList = new ArrayList<>						(perComparisonMapper.queryDuty(idNo, endTime));				if (dutyAndYearList.size() > 0) {					companyTwoMoreVo.setDuty(dutyAndYearList.get(0).getCvName());				}				//表彰奖励				List<RewardAndCount> rewardAndCountList = personalAnalysisMapper.						queryHornorByYearAndIdNo(idNo, startTime + "01", endTime + "31");				if (rewardAndCountList.size() > 0) {					StringBuilder rewardContent = new StringBuilder();					for (RewardAndCount rewardAndCount : rewardAndCountList) {						rewardContent.append("获得").append(rewardAndCount.getAward()).								append(rewardAndCount.getCount()).append("次").append(";").append(" ");					}					companyTwoMoreVo.setAssess(rewardContent.toString());				}				//警衔				List<DutyAndYear> tPoliceRankInfoDoList = perComparisonMapper.						queryPoliceRank(idNo, compareAndType.getYear());				if (tPoliceRankInfoDoList.size() > 0) {					companyTwoMoreVo.setPoliceRank(tPoliceRankInfoDoList.get(0).getCvName());				}				int yearQuery = Integer.parseInt(startTime) ;				int yearEndQuery = Integer.parseInt(endTime) ;				//民意满意度				OpinionAndJcjVo opinionAndJcjVo =						satisfiedDataSevice.getJcjAndMylData(idNo, yearQuery, yearEndQuery);				if(opinionAndJcjVo !=null) {					if (StringUtils.isNotBlank(opinionAndJcjVo.getMyd())) {						companyTwoMoreVo.setOpinion(opinionAndJcjVo.getMyd());					}				}//                Double myMyd = mpersonOpinionDao.findByMymyd(idNo, compareAndType.getYear() + "%");//                companyTwoMoreVo.setOpinion(String.valueOf(myMyd));				companyTwoMoreVoList.add(companyTwoMoreVo);			}		}		return companyTwoMoreVoList;	}	/**	 * 快速查询方法	 *	 * @param	 * @param idNumber	 * @return	 */	public List<PersonVo> getQuickSearch(String idNumber, MultiConditionQueryPojo multiConditionQueryPojo){		String roleCompanyId = RoleOfCompany.getRoleCompanyId(idNumber);		List<String> subPersonIdNos=null;		if(!roleCompanyId.equals(ChildUnit.NJSGAJ_ID)){			ChildUnit childUnit = new ChildUnit();			subPersonIdNos = childUnit.getSubPersonIdNos(roleCompanyId);		}		String sql="SELECT\n" +				"\t*\n" +				"FROM\n" +				"\t(\n" +				"\t\tSELECT\n" +				"\t\t\tNVL (T4.CVNAME, '其他') SOURCENAME,\n" +				"\t\t\tNVL (t5.LAW_MARK, '-1') SCHOOLTYPE,\n" +				"\t\t\tT1.IDNO,\n" +				"\t\t\tPERSON_AGE,\n" +				"\t\t\tTIME_TO_WORK_PSB,\n" +				"\t\t\tPOLICE_JOB_GRADE,\n" +				"\t\t\tJOB_GRADE,\n" +				"\t\t\tPOLICE_RANK,\n" +				"\t\t\tPERSON_NAME,\n" +				"\t\t\tDEPTNAME,EDUCATIONAL_TITLE" +				"\t\tFROM\n" +				"\t\t\t(\n" +				"\t\t\t\tSELECT\n" +				"\t\t\t\t\tSOURCE,\n" +				"\t\t\t\t\tIDNO,\n" +				"\t\t\t\t\tPERSON_AGE,\n" +				"\t\t\t\t\tPERSON_NAME,\n" +				"\t\t\t\t\tORG_SIMPLE_NAME || OFFICE_SIMPLE_NAME deptname,\n" +				"\t\t\t\t\tTRUNC (\n" +				"\t\t\t\t\t\tMONTHS_BETWEEN (SYSDATE, TIME_TO_WORK_PSB) / 12\n" +				"\t\t\t\t\t) AS TIME_TO_WORK_PSB,\n" +				"\t\t\t\t\tPOLICE_JOB_GRADE,\n" +				"\t\t\t\t\tJOB_GRADE,\n" +				"\t\t\t\t\tPOLICE_RANK\n" +				"\t\t\t\tFROM\n" +				"\t\t\t\t\t NJGAZNL.T_PERSON t3\n" +				"\t\t\t\tWHERE\n" +				"\t\t\t\t\tEXISTS (\n" +				"\t\t\t\t\t\tSELECT DISTINCT\n" +				"\t\t\t\t\t\t\tT2.IDENTITYNUM\n" +				"\t\t\t\t\t\tFROM\n" +				"\t\t\t\t\t\t\tNJGAZNL.SYS_USER T2\n" +				"\t\t\t\t\t\tWHERE\n" +				"\t\t\t\t\t\t\tT2.IDENTITYNUM = T3.IDNO\n" +				"\t\t\t\t\t\tAND T2.DELSTATUS = '0'\n" +				"\t\t\t\t\t\tAND T2.POST_TYPE = '0'\n";		if(subPersonIdNos!=null){			StringBuilder builder = new StringBuilder();			for (String idNo : subPersonIdNos) {				builder.append(" IDENTITYNUM='"+idNo+"' OR");			}			builder.delete(builder.length()-2,builder.length());			sql += " AND ("+builder+") ";		}		sql += "\t\t\t\t\t)\n" +				"\t\t\t\tAND DELSTATUS = '0'\n" +				"\t\t\t\tAND PCLASSID = '00001'\n" +				"\t\t\t) T1\n" +				"\t\tLEFT JOIN (\n" +				"\t\t\tSELECT\n" +				"\t\t\t\tCVFLAG,\n" +				"\t\t\t\tCVNAME\n" +				"\t\t\tFROM\n" +				"\t\t\t\tNJGAZNL.SG_QUERY_CATEGORY\n" +				"\t\t\tWHERE\n" +				"\t\t\t\tCVTYPE = 'HA'\n" +				"\t\t) T4 ON T1. SOURCE = T4.CVFLAG\n" +				"\t\tLEFT JOIN (\n" +				"\t\t\tSELECT\n" +				"\t\t\t\tIDNO,\n" +				"\t\t\t\tLAW_MARK\n" +				"\t\t\tFROM\n" +				"\t\t\t\t(\n" +				"\t\t\t\t\tSELECT\n" +				"\t\t\t\t\t\tIDNO,\n" +				"\t\t\t\t\t\tLAW_MARK,\n" +				"\t\t\t\t\t\tROW_NUMBER () OVER (\n" +				"\t\t\t\t\t\t\tPARTITION BY IDNO\n" +				"\t\t\t\t\t\t\tORDER BY\n" +				"\t\t\t\t\t\t\t\tTO_NUMBER (\n" +				"\t\t\t\t\t\t\t\t\tSUBSTR (DATA_SOURCE_ID, 12, 13)\n" +				"\t\t\t\t\t\t\t\t) DESC\n" +				"\t\t\t\t\t\t) RN\n" +				"\t\t\t\t\tFROM\n" +				"\t\t\t\t\t\t(\n" +				"\t\t\t\t\t\t\tSELECT\n" +				"\t\t\t\t\t\t\t\tL1.*, L2.TIME_TO_WORK\n" +				"\t\t\t\t\t\t\tFROM\n" +				"\t\t\t\t\t\t\t\tNJGAZNL.T_EDUCATION_INFO L1\n" +				"\t\t\t\t\t\t\tLEFT JOIN (\n" +				"\t\t\t\t\t\t\t\tSELECT\n" +				"\t\t\t\t\t\t\t\t\t*\n" +				"\t\t\t\t\t\t\t\tFROM\n" +				"\t\t\t\t\t\t\t\t\tNJGAZNL.T_PERSON\n" +				"\t\t\t\t\t\t\t\tWHERE\n" +				"\t\t\t\t\t\t\t\t\tDELSTATUS = 0\n" +				"\t\t\t\t\t\t\t\tAND PCLASSID = '00001'\n" +				"\t\t\t\t\t\t\t) L2 ON L1.IDNO = L2.IDNO\n" +				"\t\t\t\t\t\t\tWHERE\n" +				"\t\t\t\t\t\t\t\tL1.DELSTATUS = '0'\n" +				"\t\t\t\t\t\t\tAND L2.TIME_TO_WORK >= L1.GRADUATION_DATE\n" +				"\t\t\t\t\t\t)\n" +				"\t\t\t\t)\n" +				"\t\t\tWHERE\n" +				"\t\t\t\tRN = 1\n" +				"\t\t) T5 ON T1.IDNO = T5.IDNO\n" +				"\t\tLEFT JOIN (\n" +				"\t\t\tSELECT\n" +				"\t\t\t\t*\n" +				"\t\t\tFROM\n" +				"\t\t\t\t(\n" +				"\t\t\t\t\tSELECT\n" +				"\t\t\t\t\t\tROW_NUMBER () OVER (\n" +				"\t\t\t\t\t\t\tPARTITION BY IDNO\n" +				"\t\t\t\t\t\t\tORDER BY\n" +				"\t\t\t\t\t\t\t\tTO_NUMBER (\n" +				"\t\t\t\t\t\t\t\t\tSUBSTR (DATA_SOURCE_ID, 12, 13)\n" +				"\t\t\t\t\t\t\t\t) DESC\n" +				"\t\t\t\t\t\t) rn,\n" +				"\t\t\t\t\t\tidno,\n" +				"\t\t\t\t\t\tEDUCATIONAL_TITLE\n" +				"\t\t\t\t\tFROM\n" +				"\t\t\t\t\t\tNJGAZNL.T_EDUCATION_INFO\n" +				"\t\t\t\t\tWHERE\n" +				"\t\t\t\t\t\tDELSTATUS = 0\n" +				"\t\t\t\t)\n" +				"\t\t\tWHERE\n" +				"\t\t\t\trn = 1\n" +				"\t\t) t2 ON T1.IDNO = T2.IDNO\n" +				"\t)\n" +				"WHERE\n" +				"\t1 = 1";		Map<String, List<Map<String, Object>>> groupByType = multiConditionQueryPojo.getParam().stream().collect(Collectors.groupingBy(a -> String.valueOf(a.get("type")), Collectors.toList()));		StringBuilder conditionBuilder = new StringBuilder();		for (Map.Entry<String, List<Map<String, Object>>> entry : groupByType.entrySet()) {			String type = entry.getKey();			List<Map<String, Object>> params = entry.getValue();			conditionBuilder.append(" AND (1=0 ");			switch (type){				case SAME_AGE_SCOPE:					for (Map<String, Object> map : params) {						conditionBuilder.append(" ");						Object param = map.get("param");						if("30岁以下".equals(param)){							conditionBuilder.append("OR PERSON_AGE<30");						}else if("30(含)-35岁".equals(param)){							conditionBuilder.append("OR (PERSON_AGE>=30 AND PERSON_AGE<35)");						}else if("35(含)-40岁".equals(param)){							conditionBuilder.append("OR (PERSON_AGE>=35 AND PERSON_AGE<40)");						}else if("40(含)-45岁".equals(param)){							conditionBuilder.append("OR (PERSON_AGE>=40 AND PERSON_AGE<45)");						}else if ("45(含)-50岁".equals(param)){							conditionBuilder.append("OR (PERSON_AGE>=45 AND PERSON_AGE<50)");						}else if("50(含)岁以上".equals(param)){							conditionBuilder.append("OR PERSON_AGE>=50");						}					}					break;				case SAME_TIME_WORK:					for (Map<String, Object> map : params) {						conditionBuilder.append(" ");						Object param = map.get("param");						if ("5年以下".equals(param)) {							conditionBuilder.append("OR TIME_TO_WORK_PSB<5");						} else if ("5(含)-10年".equals(param)) {							conditionBuilder.append("OR (TIME_TO_WORK_PSB>=5 AND TIME_TO_WORK_PSB<10)");						} else if ("10(含)-20年".equals(param)) {							conditionBuilder.append("OR (TIME_TO_WORK_PSB>=10 AND TIME_TO_WORK_PSB<20)");						} else if ("20(含)-30年".equals(param)) {							conditionBuilder.append("OR (TIME_TO_WORK_PSB>=20 AND TIME_TO_WORK_PSB<30)");						} else if ("30(含)年以上".equals(param)) {							conditionBuilder.append("OR TIME_TO_WORK_PSB>=30");						}					}					break;				case DUTY:					List<String> queryDutys = new ArrayList<>();					for (Map<String, Object> map : params) {						Object param = map.get("param");						if (MAIN_HALL_SHIP.equals(param)) {							queryDutys.add("0520");						} else if (DEPUTY_OFFICE_SHIP.equals(param)) {							queryDutys.add("0620");						} else if (IN_THE_POST.equals(param)) {							queryDutys.add("0720");						} else if (DEPUTY_BUREAU.equals(param)) {							queryDutys.add("0715");							queryDutys.add("0716");						} else if (DEPUTY_BUREAU_NON_LEADERSHIP.equals(param)) {							queryDutys.add("0717");							queryDutys.add("0718");						} else if (PLACE_PAIR_PLACE_POSITION.equals(param)) {							queryDutys.add("0730");							queryDutys.add("0820");						} else if (AS_IS_FAMILY.equals(param)) {							queryDutys.add("0830");							queryDutys.add("0920");						} else if (OTHER_JOB.equals(param)) {							queryDutys.add("0925");							queryDutys.add("102");							queryDutys.add("10");						}					}					conditionBuilder.append("OR POLICE_JOB_GRADE IN ('"+StringUtils.join(queryDutys,"','")+"')");					break;				case DUTY_RANK:					List<String> ranks= new ArrayList<>();					for (Map<String, Object> map : params) {						ranks.add(String.valueOf(map.get("param")));					}					List<SgQueryCategoryDo> sgQueryCategoryDo = sgQueryCategoryDao.findByCvTypeAndCvNameIn("AK", ranks);					List<String> list = sgQueryCategoryDo.stream().map(s -> s.getCvFlag()).collect(Collectors.toList());					conditionBuilder.append("OR JOB_GRADE IN ('"+StringUtils.join(list,"','")+"')");					break;				case SAME_POLICE_RANK:					ranks= new ArrayList<>();					for (Map<String, Object> map : params) {						ranks.add(String.valueOf(map.get("param")));					}					sgQueryCategoryDo = sgQueryCategoryDao.findByCvTypeAndCvNameIn("XA", ranks);					list = sgQueryCategoryDo.stream().map(s -> s.getCvFlag()).collect(Collectors.toList());					conditionBuilder.append("OR POLICE_RANK IN ('"+StringUtils.join(list,"','")+"')");					break;				case SAME_EDUCATION:					for (Map<String, Object> map : params) {						conditionBuilder.append(" ");						Object param = map.get("param");						List<String> education = new ArrayList<>();						if (DOCTOR.equals(param)) {							conditionBuilder.append("OR EDUCATIONAL_TITLE='11001'");						} else if (MASTER.equals(param)) {							conditionBuilder.append("OR (EDUCATIONAL_TITLE!='11001' AND EDUCATIONAL_TITLE LIKE '1%')");						} else if (COLLEGE.equals(param)) {							conditionBuilder.append("OR  EDUCATIONAL_TITLE LIKE '2%'");						} else if (JUNIOR_COLLEGE.equals(param)) {							conditionBuilder.append("OR  EDUCATIONAL_TITLE LIKE '3%'");						} else if (UNDER_HIGH_SCHOOL.equals(param)) {							conditionBuilder.append("OR  (EDUCATIONAL_TITLE NOT LIKE '1%' AND EDUCATIONAL_TITLE NOT LIKE '2%' AND EDUCATIONAL_TITLE NOT LIKE '3%')");						}					}					break;				case SAME_SOURCE:					for (Map<String, Object> map : params) {						conditionBuilder.append(" ");						String param = String.valueOf(map.get("param"));						List<String> sourceDetailByType;						if (AUTHORITY_TO.equals(param)||CON_AND_DEMOBILIZATION.equals(param)) {							sourceDetailByType = CommonUnit.getSourceDetailByType(param);							conditionBuilder.append("OR SOURCENAME IN ('"+StringUtils.join(sourceDetailByType,"','")+"')");						}else if (SOCIAL.equals(param)) {							sourceDetailByType = CommonUnit.getSourceDetailByType(param);							conditionBuilder.append("OR （SOURCENAME IN ('"+StringUtils.join(sourceDetailByType,"','")+"') AND SCHOOLTYPE NOT IN ('1','1003') )");						}else if (POLICE_COLLEGE.equals(param)) {							conditionBuilder.append("OR (SOURCENAME IN ('"+StringUtils.join(CommonUnit.getSourceDetailByType(SOCIAL),"','")+"') AND SCHOOLTYPE IN ('1','1003')  )");						}else if (OTHER.equals(param)) {							sourceDetailByType = new ArrayList<>();							sourceDetailByType.addAll(CommonUnit.getSourceDetailByType(AUTHORITY_TO));							sourceDetailByType.addAll(CommonUnit.getSourceDetailByType(CON_AND_DEMOBILIZATION));							sourceDetailByType.addAll(CommonUnit.getSourceDetailByType(SOCIAL));							conditionBuilder.append("OR SOURCENAME NOT IN ('"+StringUtils.join(sourceDetailByType,"','")+"'  )");						}					}					break;				default:break;			}			conditionBuilder.append(")");		}		List<Map<String, Object>> maps = primaryJdbcTemplate.queryForList(sql + conditionBuilder);		List<PersonVo> vos = new ArrayList<>();		for (Map<String, Object> map : maps) {			PersonVo vo = new PersonVo();			vo.setIdNo(String.valueOf(map.get("IDNO")));			vo.setName(String.valueOf(map.get("PERSON_NAME")));			vo.setDeptName(String.valueOf(map.get("DEPTNAME")));			vos.add(vo);		}		return vos;	}	/**	 * 模糊查询那些属于本科和大专	 *	 * @param flag	 * @return	 */	private List<String> getEducationCodeByFlag(String flag) {		List<String> educationList = new ArrayList<>();		List<SgQueryCategoryDo> sgQueryCategoryDoList = sgQueryCategoryDao.				findAllByCvTypeAndCvFlagLike("AM", flag);		if (sgQueryCategoryDoList.size() > 0) {			sgQueryCategoryDoList.forEach(s -> educationList.add(s.getCvFlag()));		}		return educationList;	}	/**	 * 去除list 中的空数组	 *	 * @param strList	 * @return	 */	private List<String> removeListEmptyTextBackNewArray(List<String> strList) {		List<String> strListNew = new ArrayList<>();		for (String s : strList) {			if (s != null && !" ".equals(s)) {				strListNew.add(s);			}		}		return strListNew;	}	/**	 * 获取ftp上的图片	 * @param sfzh	 * @return	 */	public void downloadStream(String sfzh, HttpServletResponse response){		String pathName = sfzh+".jpg";		FTPClient ftpClient = new FTPClient();		InputStream inputStream = null;		try {			System.out.println("connect "+ftpIp);			ftpClient.connect(ftpIp,21);//            ftpClient.connect("192.168.8.135",21);			ftpClient.login("zhzg", "zhzg");//            ftpClient.login("anonymous", "zhzg");			ftpClient.setFileType(FTPClient.BINARY_FILE_TYPE);			//是否成功登录服务器			int reply = ftpClient.getReplyCode();			if (!FTPReply.isPositiveCompletion(reply)) {				ftpClient.disconnect();			}			System.out.println("reply "+reply);			//跳转到指定目录			ftpClient.changeWorkingDirectory("headimg/");			ftpClient.enterLocalPassiveMode();			//5.遍历下载的目录//            FTPFile[] fs = ftpClient.listFiles();//            for (FTPFile ff : fs){//                //解决中文乱码问题，两次解码//                byte[] bytes=ff.getName().getBytes(StandardCharsets.ISO_8859_1);//                String fileName=new String(bytes, StandardCharsets.UTF_8);//                System.out.println("fileName "+fileName);//                if(pathName.equals(fileName)){			inputStream = ftpClient.retrieveFileStream(pathName);//                }//            }			if (inputStream != null) {				IOUtil.copyCompletely(inputStream,response.getOutputStream());				inputStream.close();				ftpClient.completePendingCommand();			}		} catch (Exception e) {			e.printStackTrace();		}finally{			if(ftpClient.isConnected()){				try{					ftpClient.disconnect();				}catch(IOException e){					e.printStackTrace();				}			}			if(null != inputStream){				try {					inputStream.close();				} catch (IOException e) {					e.printStackTrace();				}			}		}	}}