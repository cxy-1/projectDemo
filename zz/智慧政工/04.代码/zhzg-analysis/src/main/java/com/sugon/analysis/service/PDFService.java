package com.sugon.analysis.service;import com.deepoove.poi.XWPFTemplate;import com.deepoove.poi.config.Configure;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import sun.misc.BASE64Decoder;import javax.annotation.PostConstruct;import javax.imageio.ImageIO;import javax.servlet.ServletOutputStream;import javax.servlet.http.HttpServletResponse;import java.awt.image.BufferedImage;import java.io.*;import java.util.UUID;/** * @program: analysis->pdfService * @description: * @author: hxb * @create: 2019-12-11 18:22 **/@Service@Slf4jpublic class PDFService {	@Value("${spring.file.template}")	private String template;	@Value("${spring.file.outPath}")	private String outPath;	@Value("${spring.file.picPath}")	private String picPath;	@Value("${local.url}")	private String localUrl;	@PostConstruct	public void init() {		try {			InputStream isWord = PDFService.class.getClassLoader().getResourceAsStream("license.xml");			com.aspose.words.License aposeWordLic = new com.aspose.words.License();			assert isWord != null;			aposeWordLic.setLicense(isWord);		} catch (Exception ignored) {		}	}//    public String writewordandconvertpdf(Object approvalForm, String wordName) throws Exception {//        //word 模板//        String wordTargetPath = template + wordName + ".docx";//        //String wordTargetPath = "E:\\home\\apache-tomcat-8.5.40\\template\\" + wordName + ".docx";//        //生成的word//        String wordOutPath = template + wordName + System.currentTimeMillis() + ".docx";//        //String wordOutPath = "E:\\home\\apache-tomcat-8.5.40\\" + wordName + ".docx";////        writeDoc(approvalForm, wordTargetPath, wordOutPath);//        //pdf//        String pdfPath = outPath;//        //String pdfPath = "E:\\home\\apache-tomcat-8.5.40\\";//        Document document = new Document(PageSize.A4.rotate(), 0, 0, 0, 0);//        //创建文件路径//        File file2 = new File(pdfPath);//        if (!file2.exists()) {//            file2.mkdir();//        }//        log.info("file2:" + file2);//        String pdfName = "chuguojing";//        log.info("pdfName:" + pdfName);//        File file1 = File.createTempFile(pdfName, ".pdf", file2);//        pdfName = file1.getName();//        PdfWriter.getInstance(document, new FileOutputStream(file1));//        FileOutputStream os = new FileOutputStream(file1);//        com.aspose.words.Document doc = new com.aspose.words.Document(wordOutPath);//        doc.save(os, com.aspose.words.SaveFormat.PDF);//        os.close();//        log.info("123123123" + pdfPath);//        log.info("321321321231" + pdfName);//        return pdfPath + pdfName;//    }	public String writewordandconvertpdf(Object approvalForm, String wordName, Configure configure, HttpServletResponse response) throws Exception {		//word 模板		String wordTargetPath = template + wordName;		//String wordTargetPath = "E:\\home\\apache-tomcat-8.5.40\\template\\" + wordName + ".docx";		//生成的word		String wordOutPath = outPath + UUID.randomUUID() + wordName;		//String wordOutPath = "E:\\home\\apache-tomcat-8.5.40\\" + wordName + ".docx";		writeDoc(approvalForm, wordTargetPath, wordOutPath,configure);		byte[] buffer = new byte[1024];		ServletOutputStream os = response.getOutputStream();		int len = 0;		FileInputStream in = new FileInputStream(new File(wordOutPath));		while ((len = in.read(buffer)) > 0) {			os.write(buffer, 0, len);		}		in.close();		os.close();//        word 模板//        String templatePath = template + wordName;////        XWPFTemplate compile;//        if(configure!=null){//            compile = XWPFTemplate.compile(templatePath,configure);//        }else{//            compile = XWPFTemplate.compile(templatePath);//        }//        XWPFTemplate template = compile.render(approvalForm);//        try {//            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();//            template.//            template.write(byteArrayOutputStream);//            template.close();////        } catch (IOException e) {//            e.printStackTrace();//        }		return null;	}	//传过来的参数file是前段直接Base64编码后的字符串，参数personId只是用来做文件命名使用	public BufferedImage base64toMultipart(String file, String personId) {		String[] baseStrs = file.split(",");		//base64格式前头//        String dataPrix = "";		//实体部分数据		String data = "";//        if (baseStrs != null && baseStrs.length == 2) {//            dataPrix = baseStrs[0];		data = baseStrs[1];//        } else {//            return "图片错误";//        }		BASE64Decoder decoder = new BASE64Decoder();		try {			//Base64解码			//（因为byte是有符号的，它表示的范围是-127~127，如果要映射到无符号0~255，那么0~127不用改变，而-128~-1对应128~255）			//所以要调整异常数据			byte[] b = decoder.decodeBuffer(data);			for (int i = 0; i < b.length; ++i) {				if (b[i] < 0) {					//调整异常数据					b[i] += 256;				}			}			ByteArrayInputStream byteInputStream = new ByteArrayInputStream(b);			return  ImageIO.read(byteInputStream);		} catch (IOException e) {			e.printStackTrace();		}		return null;	}	private static void writeDoc(Object obj, String filePath, String outPath,Configure configure) {		System.out.println("要写入的数据是:" + obj);		System.out.println("路径是:" + filePath);		XWPFTemplate compile;		if(configure!=null){			compile = XWPFTemplate.compile(filePath,configure);		}else{			compile = XWPFTemplate.compile(filePath);		}		XWPFTemplate template = compile.render(obj);		FileOutputStream out;		try {			out = new FileOutputStream(outPath);			template.write(out);			out.flush();			out.close();			template.close();		} catch (IOException e) {			e.printStackTrace();		}	}}