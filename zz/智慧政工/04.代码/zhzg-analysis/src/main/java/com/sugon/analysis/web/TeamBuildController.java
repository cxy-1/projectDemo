package com.sugon.analysis.web;import com.sugon.analysis.domain.data.query.KPIQuery;import com.sugon.analysis.domain.data.query.TeamDetail;import com.sugon.analysis.domain.data.subset.CustomCache;import com.sugon.analysis.domain.param.TeamSelect;import com.sugon.analysis.domain.param.WindowType;import com.sugon.analysis.domain.view.teambuild.RankListVo;import com.sugon.analysis.enums.result.ResultModel;import com.sugon.analysis.repository.oracle.SysDeptDao;import com.sugon.analysis.service.AsyncTaskService;import com.sugon.analysis.service.TeamBuildService;import com.sugon.analysis.util.Cache;import com.sugon.analysis.util.ChildUnit;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.springframework.scheduling.annotation.Scheduled;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import java.util.*;import java.util.concurrent.ExecutionException;import java.util.concurrent.Future;import static com.sugon.analysis.enums.ResponsesStatus.SUCCESS;/** * @program: analysis->TeamBuildController * @description: * @author: gaowh * @create: 2019-10-28 15:24 **/@RestController@RequestMapping("/teamBuild")@Slf4jpublic class TeamBuildController {    @Resource    private TeamBuildService teamBuildService;    @Resource    private AsyncTaskService asyncTaskService;    @Resource    private SysDeptDao sysDeptDao;    /*********************************************************     *                    队伍建设成效首页                    *     *********************************************************/    /**     * 获取分局或部门信息     */    @CrossOrigin    @RequestMapping(value = "/getTeamInfo", method = RequestMethod.GET)    public ResultModel getTeamInfo(@RequestParam("idNumber") String idNumber) {        return teamBuildService.getTeamInfo(idNumber);    }    /**     * 获取单位子部门信息     */    @CrossOrigin    @RequestMapping("/getChildUnit")    public ResultModel getChildUnit(@RequestParam("unitId") String unitId) {        return teamBuildService.getChildUnit(unitId);    }    /**     * 获取队伍信息     */    @CrossOrigin    @RequestMapping(value = "/getTeamDataInfo", method = RequestMethod.POST)    public ResultModel getTeamDataInfo(@RequestBody TeamSelect teamSelect) throws ExecutionException, InterruptedException {        String cacheKey = "teamDataInfo&"+teamSelect.getType()+"&"+teamSelect.getYear()+"&"+teamSelect.getStartYear()+"&"+teamSelect.getEndYear()+"&"+ StringUtils.join(teamSelect.getUnitId(),",");        ResultModel resultModel1 = Cache.get(cacheKey, ResultModel.class);        if(resultModel1!=null){            return resultModel1;        }        //返回给前端的数据        ResultModel resultModel = new ResultModel();        //返回给前端的data        Map<String, Object> map = new HashMap<>();        //标签中的数据        List<Object> data1List = new ArrayList<>();        Future<Map<String, Object>> honorMap = asyncTaskService.getHonorMax(teamSelect);        Future<Map<String, String>> satisfiedMap = asyncTaskService.getSatisfiedMax(teamSelect);        Future<Map<String, Object>> caseMap = asyncTaskService.getBreakRuleCaseMin(teamSelect);        //各个维度颜色分类的最大最小值        Map<String, Map<String, Object>> data2Map = teamBuildService.getColorEdge(teamSelect);        ChildUnit childUnit = new ChildUnit();        teamSelect.setUnitMap(new HashMap<>());        teamSelect.getUnitId().forEach(v->{            teamSelect.getUnitMap().put(v,childUnit.getSubPerson(v));        });        Future<Map<String, Object>> personMap = asyncTaskService.getPersonCountMax(teamSelect);        Future<Map<String, Object>> ageMap =asyncTaskService.getAgeMapMin(teamSelect);        Future<Map<String, Object>> femaleMap = asyncTaskService.getFemaleCountMax(teamSelect);        //判断异步任务是否都执行结束        while(!personMap.isDone() || !ageMap.isDone() || !femaleMap.isDone() || !honorMap.isDone() || !satisfiedMap.isDone() || !caseMap.isDone()) {            Thread.sleep(200);            if(personMap.isDone() && ageMap.isDone() && femaleMap.isDone() && honorMap.isDone() && satisfiedMap.isDone() && caseMap.isDone()) {                break;            }        }        data1List.add(personMap.get());        data1List.add(ageMap.get());        data1List.add(femaleMap.get());        data1List.add(honorMap.get());        data1List.add(satisfiedMap.get());        data1List.add(caseMap.get());        map.put("data1", data1List);        map.put("data2", data2Map);        resultModel.setResult(map);        Cache.save(cacheKey,resultModel);        return resultModel;    }    @Scheduled(cron = "0 30 4 * * ?")    public void updateCache() throws ExecutionException, InterruptedException {        List<CustomCache> list = Cache.getCacheListByKeyLike("teamDataInfo&");        for (CustomCache cache : list) {            String[] keys =cache.getKey().split("&");            TeamSelect teamSelect = new TeamSelect();            teamSelect.setType(keys[1]);            teamSelect.setYear(keys[2]);            teamSelect.setStartYear(keys[3]);            teamSelect.setEndYear(keys[4]);            teamSelect.setUnitId(Arrays.asList(keys[5].split(",")));            Cache.delete(cache.getKey());            getTeamDataInfo(teamSelect);        }        list = Cache.getCacheListByKeyLike("deptColor&");        for (CustomCache cache : list) {            String[] keys =cache.getKey().split("&");            TeamSelect teamSelect = new TeamSelect();            teamSelect.setType(keys[1]);            teamSelect.setYear(keys[2]);            teamSelect.setStartYear(keys[3]);            teamSelect.setEndYear(keys[4]);            teamSelect.setUnitId(Arrays.asList(keys[5].split(",")));            Cache.delete(cache.getKey());            getDeptColor(teamSelect);        }    }    /**     * 获取地图颜色信息     */    @CrossOrigin    @RequestMapping(value = "/getDeptColor", method = RequestMethod.POST)    public ResultModel getDeptColor(@RequestBody TeamSelect teamSelect) {        String cacheKey = "deptColor&"+teamSelect.getType()+"&"+teamSelect.getYear()+"&"+teamSelect.getStartYear()+"&"+teamSelect.getEndYear()+"&"+ StringUtils.join(teamSelect.getUnitId(),",");        ResultModel resultModel1 = Cache.get(cacheKey, ResultModel.class);        if(resultModel1!=null){            return resultModel1;        }        //返回给前端的数据        ResultModel resultModel = new ResultModel();        //队伍颜色数据        resultModel.setResult(teamBuildService.getColorLevel(teamSelect));        Cache.save(cacheKey,resultModel);        return resultModel;    }//    //测试满意度接口//    @RequestMapping("/getUnitSatisfied")//    public ResultModel getUnitSatisfied(@RequestParam("unitId") String unitId) {//        //返回给前端的数据//        ResultModel resultModel = new ResultModel();//        //队伍颜色数据//        resultModel.setResult(teamBuildService.getUnitSatisfied(unitId));//        return resultModel;//    }    /**     * 悬浮窗信息     */    @CrossOrigin    @RequestMapping(value = "/getWindowsInfo", method = RequestMethod.POST)    public ResultModel getWindowsInfo(@RequestBody WindowType windowType) {        //返回给前端的数据        ResultModel resultModel = new ResultModel();        resultModel.setResult(teamBuildService.getWindowsInfo(windowType));        return resultModel;    }    /**     * 获取排行榜     */    @CrossOrigin    @RequestMapping(value = "/getRankList", method = RequestMethod.POST)    public ResultModel getRankList(@RequestBody TeamSelect teamSelect) {        //返回给前端的数据        ResultModel resultModel = new ResultModel();        List<RankListVo> rankList = new ArrayList<>();        ChildUnit childUnit = new ChildUnit();        teamSelect.setUnitMap(new HashMap<>());        teamSelect.getUnitId().forEach(v -> {            RankListVo rankListVo = new RankListVo();            rankListVo.setName(sysDeptDao.findByIdAndDelStatus(v, 0).getUnitName());            rankList.add(rankListVo);        });        Future<Boolean> orgHonorPercent = asyncTaskService.getOrgHonorPercent(teamSelect, rankList);        Future<Boolean> personHonorPercent = asyncTaskService.getPersonHonorPercent(teamSelect, rankList);        Future<Boolean> satisfied = asyncTaskService.getSatisfied(teamSelect, rankList);        Future<Boolean> breakRuleCase = asyncTaskService.getCasePercent(teamSelect, rankList);        teamSelect.getUnitId().forEach(v -> {            teamSelect.getUnitMap().put(v,childUnit.getSubPerson(v));        });        Future<Boolean> personCount = asyncTaskService.getPersonCount(teamSelect, rankList);        Future<Boolean> avgAge = asyncTaskService.getAvgAge(teamSelect, rankList);        Future<Boolean> femalePercent = asyncTaskService.getFemalePercent(teamSelect, rankList);        //判断异步任务是否都执行结束        while(!personCount.isDone() || !avgAge.isDone() || !femalePercent.isDone() || !orgHonorPercent.isDone()                || !personHonorPercent.isDone() || !satisfied.isDone() || !breakRuleCase.isDone()) {            if(personCount.isDone() && avgAge.isDone() && femalePercent.isDone() && orgHonorPercent.isDone()                    && personHonorPercent.isDone() && satisfied.isDone() && breakRuleCase.isDone()) {                break;            }        }//        rankList.forEach(v -> {//            String orgPercent, personPercent, casePercent;//            DecimalFormat df = new DecimalFormat("0.00%");//            if (v.getCount() > 0){//                orgPercent = df.format(StringUtils.isEmpty(v.getOrgHonor())?0:(Double.valueOf(v.getOrgHonor())/(double)v.getCount()));//                personPercent = df.format(StringUtils.isEmpty(v.getPersonHonor())?0:(Double.valueOf(v.getPersonHonor())/(double)v.getCount()));//                casePercent = df.format(StringUtils.isEmpty(v.getIllegal())?0:(Double.valueOf(v.getIllegal())/(double)v.getCount()));//            }else {//                orgPercent = df.format(0);//                personPercent = df.format(0);//                casePercent = df.format(0);//            }//            v.setOrgHonor(orgPercent);//            v.setPersonHonor(personPercent);//            v.setIllegal(casePercent);//        });        rankList.forEach(v -> {            double orgPercent = 0d, personPercent = 0d, casePercent = 0d;            if (v.getCount() != null && v.getCount() > 0){                orgPercent = Double.parseDouble(String.format("%.2f", v.getOrgHonor() == null?0:(v.getOrgHonor()/(double) v.getCount())*100));                personPercent = Double.parseDouble(String.format("%.2f", v.getPersonHonor() == null?0:(v.getPersonHonor()/(double)v.getCount())*100));                casePercent = Double.parseDouble(String.format("%.2f", v.getIllegal() == null?0:(v.getIllegal()/(double)v.getCount())*100));            }            v.setOrgHonor(orgPercent);            v.setPersonHonor(personPercent);            v.setIllegal(casePercent);        });        resultModel.setResult(rankList);        return resultModel;    }    /*********************************************************     *                    综合成效评估页面                    *     *********************************************************/    /**     * 人员构成     */    @CrossOrigin    @RequestMapping(value = "/getPersonDetail", method = RequestMethod.POST)    public ResultModel getPersonDetail(@RequestBody TeamDetail teamDetail) {        return teamBuildService.getPersonDetail(teamDetail);    }    /**     * 年龄结构     */    @CrossOrigin    @RequestMapping(value = "/getAgeDetail", method = RequestMethod.POST)    public ResultModel getAgeDetail(@RequestBody TeamDetail teamDetail) {        //返回给前端的数据        ResultModel resultModel = new ResultModel();        if (teamDetail.getIsDownload()){            try {                teamBuildService.getAgeExport(teamDetail);            }catch (Exception e){                return resultModel;            }            resultModel.setResult(SUCCESS);            return resultModel;        }else if (teamDetail.getIsDetail()){            resultModel.setResult(teamBuildService.getAgeDetail(teamDetail));        }else {            resultModel.setResult(teamBuildService.getAgeInfo(teamDetail));        }        return resultModel;    }    /**     * 教育培训     */    @CrossOrigin    @RequestMapping(value = "/getTrainDetail", method = RequestMethod.POST)    public ResultModel getTrainDetail(@RequestBody TeamDetail teamDetail) {        //返回给前端的数据        ResultModel resultModel = new ResultModel();        if (teamDetail.getIsDownload()){            try {                teamBuildService.getTrainExport(teamDetail);            }catch (Exception e){                return resultModel;            }            resultModel.setResult(SUCCESS);            return resultModel;        }else if (teamDetail.getIsDetail()){            resultModel.setResult(teamBuildService.getTrainDetail(teamDetail));        }else {            resultModel.setResult(teamBuildService.getTrainInfo(teamDetail));        }        return resultModel;    }    /**     * 集体荣誉     */    @CrossOrigin    @RequestMapping(value = "/getOrgHonorDetail", method = RequestMethod.POST)    public ResultModel getOrgHonorDetail(@RequestBody TeamDetail teamDetail) {        //返回给前端的数据        ResultModel resultModel = new ResultModel();        if (teamDetail.getIsDownload()){            try {                teamBuildService.getOrgHonorExport(teamDetail);            }catch (Exception e){                return resultModel;            }            resultModel.setResult(SUCCESS);            return resultModel;        }else if (teamDetail.getIsDetail()){            resultModel.setResult(teamBuildService.getOrgHonorDetail(teamDetail));        }else {            resultModel.setResult(teamBuildService.getOrgHonor(teamDetail));        }        return resultModel;    }    /**     * 个人荣誉     */    @CrossOrigin    @RequestMapping(value = "/getPersonHonorDetail", method = RequestMethod.POST)    public ResultModel getPersonHonorDetail(@RequestBody TeamDetail teamDetail) {        //返回给前端的数据        ResultModel resultModel = new ResultModel();        //是否下载        if (teamDetail.getIsDownload()){            try {                teamBuildService.getPersonHonorExport(teamDetail);            }catch (Exception e){                return resultModel;            }            resultModel.setResult(SUCCESS);            return resultModel;        }else if (teamDetail.getIsDetail()){            resultModel.setResult(teamBuildService.getPersonHonorDetail(teamDetail));        }else {            resultModel.setResult(teamBuildService.getPersonHonor(teamDetail));        }        return resultModel;    }    /**     * 纪检案件     */    @CrossOrigin    @RequestMapping(value = "/getBreakRuleCase", method = RequestMethod.POST)    public ResultModel getBreakRuleCase(@RequestBody TeamDetail teamDetail) {        //返回给前端的数据        ResultModel resultModel = new ResultModel();        if (teamDetail.getIsDownload()){            try {                teamBuildService.getBreakRuleCaseExport(teamDetail);            }catch (Exception e){                return resultModel;            }            resultModel.setResult(SUCCESS);            return resultModel;        }else if (teamDetail.getIsDetail()){            resultModel.setResult(teamBuildService.getBreakRuleCaseDetail(teamDetail));        }else {            resultModel.setResult(teamBuildService.getBreakRuleCase(teamDetail));        }        return resultModel;    }    /**     * 政工绩效     */    @CrossOrigin    @RequestMapping(value = "/getKPI", method = RequestMethod.POST)    public ResultModel getKPI(@RequestBody KPIQuery kpiQuery) {        kpiQuery.setUnitId(null);        return teamBuildService.getKPI(kpiQuery);    }    /**     * 获取绩效考核年份菜单     *     * @return     */    @CrossOrigin    @RequestMapping("/getKPIMenu")    @ResponseBody    public List<Map<String,Object>> getKPIMenu()    {        return teamBuildService.getKPIMenu();    }}