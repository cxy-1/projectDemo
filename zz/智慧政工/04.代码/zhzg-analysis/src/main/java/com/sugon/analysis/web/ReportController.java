package com.sugon.analysis.web;import com.deepoove.poi.config.Configure;import com.deepoove.poi.config.ConfigureBuilder;import com.sugon.analysis.domain.data.object.oracle.SysDeptDo;import com.sugon.analysis.domain.data.query.TeamDetail;import com.sugon.analysis.domain.param.ReportVo;import com.sugon.analysis.domain.view.report.TeamReport;import com.sugon.analysis.enums.result.ResultModel;import com.sugon.analysis.platform.repository.ReportModelHistoryRepository;import com.sugon.analysis.repository.oracle.SysDeptDao;import com.sugon.analysis.service.PDFService;import com.sugon.analysis.service.TeamReportService;import com.sugon.analysis.util.ChildUnit;import io.swagger.annotations.ApiOperation;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Value;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.web.bind.annotation.*;import javax.annotation.Resource;import javax.servlet.http.HttpServletResponse;import java.time.LocalDate;import java.util.List;import java.util.Map;import java.util.concurrent.Future;/** * @author: create by huangxb * @version: v1.0 * @description: * @date:2019/12/27 */@RestController@RequestMapping("/report")@Slf4jpublic class ReportController {    @Resource    private PDFService pdfService;    @Resource    private TeamReportService teamReportService;    @Resource    private SysDeptDao sysDeptDao;    @Resource    private ReportModelHistoryRepository reportModelHistoryRepository;    @Resource(name = "tertiaryJdbcTemplate")    private JdbcTemplate tertiaryJdbcTemplate;    @Value("${spring.profiles.active}")    private String active;    /**     * 生成的报告     * @param reportVo     * @return     */    @CrossOrigin    @ApiOperation(value = "获取报告", notes = "获取市局分局报告")    @RequestMapping(value = "/getTeamReport", method = RequestMethod.POST)    public ResultModel getTeamReport(@RequestBody ReportVo reportVo,HttpServletResponse response) {        ResultModel resultModel = new ResultModel();        //整篇文档        TeamReport teamReport = new TeamReport();        LocalDate now = LocalDate.now();        teamReport.setCurrentYear(now.getYear());        teamReport.setLastYear(String.valueOf(teamReport.getCurrentYear()-1));        teamReport.setCurrentMonth(teamReport.getCurrentYear()+"年"+now.getMonthValue()+"月");        //通过传过来的unitId 获取对应的部门实体类（jpa查询）        SysDeptDo sysDeptDo = sysDeptDao.findByIdAndDelStatus(reportVo.getUnitId(),0);        //文档名称        String wordName;        //判断部门级别（一级部门、二级部门...）        Configure configure;        ConfigureBuilder builder = Configure.newBuilder();        String deptLevel = sysDeptDo.getDeptLevel();        if(ChildUnit.zzbSubList.contains(sysDeptDo.getId())){            deptLevel="3";        }        List<Map<String, Object>> maps = tertiaryJdbcTemplate.queryForList("SELECT * FROM (SELECT MODEL_LEVEL,FILE_PATH FROM REPORT_MODEL_HISTORY WHERE MODEL_TYPE='2' AND MODEL_LEVEL='"+deptLevel+"' AND ACTIVE='"+active+"' ORDER BY CREATE_TIME DESC) WHERE ROWNUM=1 ");        if(maps.size()==1){            wordName = String.valueOf(maps.get(0).get("FILE_PATH"));        }else{            wordName = "baogao"+deptLevel+".docx";        }        configure = builder.build();        //得到生成文档中所要填充的数据        try {            Future<Boolean> personCount = teamReportService.getPersonCount(reportVo, teamReport);            Future<Boolean> dutyRank = teamReportService.getDutyRank(reportVo, teamReport);            Future<Boolean> duty = teamReportService.getDuty(reportVo, teamReport);            Future<Boolean> age = teamReportService.getAge(reportVo, teamReport);            Future<Boolean> honor = teamReportService.getHonor(reportVo, teamReport);            Future<Boolean> personnelTransfer = teamReportService.getPersonnelTransfer(reportVo, teamReport,builder);            Future<Boolean> rule = teamReportService.getRule(reportVo, teamReport);            Future<Boolean> kpi = teamReportService.getKpi(reportVo, teamReport,builder);            Future<Boolean> train = teamReportService.getTrain(reportVo, teamReport);            Future<Boolean> workTime = teamReportService.getWorkTime(reportVo, teamReport);            Future<Boolean> education = teamReportService.getEducation(reportVo, teamReport);            Future<Boolean> mymyd = teamReportService.getMymyd(reportVo, teamReport,builder);            Future<Boolean> leaderDuty = teamReportService.getLeaderData(reportVo, teamReport,true);            while (!personnelTransfer.isDone() || !mymyd.isDone() || !workTime.isDone() || !education.isDone() || !kpi.isDone() || !personCount.isDone() || !dutyRank.isDone() || !duty.isDone() || !age.isDone() || !honor.isDone() ||  !rule.isDone() || !train.isDone()||!leaderDuty.isDone()) {                if (personnelTransfer.isDone() && mymyd.isDone() && workTime.isDone() && education.isDone() && kpi.isDone() && personCount.isDone() && dutyRank.isDone() && duty.isDone() && age.isDone() && honor.isDone()                        && rule.isDone() &&train.isDone()&&leaderDuty.isDone()) {                    break;                }            }            resultModel.setResult(pdfService.writewordandconvertpdf(teamReport,wordName, configure,response));        } catch (Exception e) {            e.printStackTrace();        }        return resultModel;    }    @CrossOrigin    @ApiOperation(value = "获取领导班子图表数据", notes = "获取领导班子图表数据")    @RequestMapping(value = "/getLeaderData", method = RequestMethod.POST)    public ResultModel getLeaderData(@RequestBody TeamDetail teamDetail) {        return teamReportService.getLeaderData(teamDetail);    }    @CrossOrigin    @ApiOperation(value = "获取隐藏的非领导班子图表数据", notes = "获取隐藏的非领导班子图表数据")    @RequestMapping(value = "/getHiddenData", method = RequestMethod.POST)    public ResultModel getHiddenData(@RequestBody TeamDetail teamDetail) {        return teamReportService.getHiddenData(teamDetail);    }    @RequestMapping(value = "/testController", method = RequestMethod.POST)    public ResultModel getTeamAnalyseReport(@RequestBody ReportVo reportVo) {        TeamReport teamReport = new TeamReport();        Future<Boolean> leaderDuty = teamReportService.getPersonnelTransfer(reportVo, teamReport,null);        while (!leaderDuty.isDone()){            if (leaderDuty.isDone() ) {                break;            }        }        return ResultModel.success(teamReport);    }    /**     * 生成 队伍分析评估报告 young     * @param     * @return     */    /*@CrossOrigin    @ApiOperation(value = "获取报告", notes = "获取市局队伍分析评估报告")    @RequestMapping(value = "/getTeamAnalyseReport", method = RequestMethod.POST)    public ResultModel getTeamAnalyseReport(@RequestBody ReportAnalyseRequest reportAnalyseRequest) {        ResultModel resultModel = new ResultModel();        //整篇文档        TeamAnalyseReport teamAnalyseReport=new TeamAnalyseReport();        //获取对应的部门实体类        SysDeptDo sysDeptDo = sysDeptDao.findByIdAndDelStatus(reportAnalyseRequest.getUnitId(),0);        //文档名称        String wordName;        //判断部门级别（一级部门、二级部门...）---1南京市局 2分局 3派出所        *//*if("1".equals(sysDeptDo.getDeptLevel())){            wordName = "leaderbaogao1";        }else if("2".equals(sysDeptDo.getDeptLevel())) {            wordName = "leaderbaogao2";        }else {            wordName = "leaderbaogao3";        }*//*        wordName = "leaderbaogao1";        //得到生成文档中所要填充的数据        try {            Future<Boolean> age = teamReportAnalyseService.getAge(reportVo, teamAnalyseReport);            while(!age.isDone()){                if(age.isDone()){                    resultModel.setResult(pdfService.writewordandconvertpdf(teamAnalyseReport,wordName));                }            }            *//*Future<Boolean> personCount = teamReportService.getPersonCount(reportVo, teamReport);            Future<Boolean> dutyRank = teamReportService.getDutyRank(reportVo, teamReport);            Future<Boolean> duty = teamReportService.getDuty(reportVo, teamReport);            Future<Boolean> age = teamReportService.getAge(reportVo, teamReport);            Future<Boolean> honor = teamReportService.getHonor(reportVo, teamReport);            Future<Boolean> rule = teamReportService.getRule(reportVo, teamReport);            Future<Boolean> train = teamReportService.getTrain(reportVo, teamReport);            while (!personCount.isDone() || !dutyRank.isDone() || !duty.isDone() || !age.isDone() || !honor.isDone() ||                    !rule.isDone() || !train.isDone()) {                if (personCount.isDone() && dutyRank.isDone() && duty.isDone() && age.isDone() && honor.isDone()                        && rule.isDone() &&train.isDone()) {                    break;                }            }            resultModel.setResult(pdfService.writewordandconvertpdf(teamReport,wordName));*//*        } catch (Exception e) {            e.printStackTrace();        }        return resultModel;    }*/}