package com.sugon.analysis.service;import com.sugon.analysis.domain.data.object.oracle.SysDeptDo;import com.sugon.analysis.domain.data.query.KPIQuery;import com.sugon.analysis.domain.param.DetailParamPojo;import com.sugon.analysis.domain.param.TeamSelect;import com.sugon.analysis.domain.view.EchartsVo;import com.sugon.analysis.domain.view.teambuild.*;import com.sugon.analysis.domain.view.teamcomparison.OrgHonorByYearVo;import com.sugon.analysis.enums.PersonStereoConstant;import com.sugon.analysis.enums.result.ResultModel;import com.sugon.analysis.mappper.oracle.TeamBuildMapper;import com.sugon.analysis.mappper.oracle.TeamComparisonMapper;import com.sugon.analysis.repository.oracle.SysDeptDao;import com.sugon.analysis.util.ChildUnit;import com.sugon.analysis.util.CommonUnit;import com.sugon.analysis.util.DateUtil;import com.sugon.analysis.util.RoleOfCompany;import org.apache.commons.lang.StringUtils;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.text.SimpleDateFormat;import java.util.*;import java.util.stream.Collectors;import static com.sugon.analysis.enums.ResponsesStatus.NODATA;import static com.sugon.analysis.util.CommonUnit.zzbSubList;/** * @program: analysis->TeamComparisonService * @description: * @author: gaowh * @create: 2019-11-04 11:44 **/@Servicepublic class TeamComparisonService {	@Resource	private TeamBuildMapper teamBuildMapper;	@Resource	private TeamBuildService teamBuildService;	@Resource	private TeamComparisonMapper teamComparisonMapper;	@Resource	private SysDeptDao sysDeptDao;	@Resource	private SatisfiedDataSevice satisfiedDataSevice;	@Resource(name = "primaryJdbcTemplate")	private JdbcTemplate primaryJdbcTemplate;	@Resource(name = "tertiaryJdbcTemplate")	private JdbcTemplate tertiaryJdbcTemplate;	/**	 * 分局或部门信息	 */	public ResultModel getTeamInfoByIdno(String idNumber) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		//权限id		String dataId = RoleOfCompany.getRoleCompanyId(idNumber);		Map<String, Object> map = getTeamInfoByUnitId(dataId);		if(map.get("role")==null){			resultModel.setResult(NODATA);		}else{			resultModel.setResult(map);		}		return resultModel;	}	public Map<String,Object> getTeamInfoByUnitId(String unitId){		Map<String, Object> maps = new HashMap<>(16);		//权限List		List<String> roleList = new ArrayList<>();		//根据权限id查出部门信息		SysDeptDo unitInfo = sysDeptDao.findByIdAndDelStatus(unitId, 0);		List<String> fjList = new ArrayList<>();		List<String> bmList = new ArrayList<>();		teamBuildMapper.findAllTeam("1", "0").forEach(v -> {			fjList.add(v.getId());		});		teamBuildMapper.findAllTeam("0", "1").forEach(v -> {			bmList.add(v.getId());		});		if ("2014110416460086100000002942".equals(unitId)) {			//市局权限			List<TeamInfoVo> list1 = teamBuildMapper.findAllTeam("1", "0");			if (list1.size() > 0){				list1.forEach(v -> {					v.setSimpleName(CommonUnit.getUnitName(v.getTeamName()));					v.setIsZoom(true);				});			}			List<TeamInfoVo> list2 = teamBuildMapper.findAllTeam("0", "1");			if (list2.size() > 0){				list2.forEach(v -> {					v.setSimpleName(CommonUnit.getUnitName(v.getTeamName()));					v.setIsZoom(true);				});			}			list1.sort((o1, o2) -> {				int i1 = CommonUnit.deptList.indexOf(o1.getTeamName());				int i2 = CommonUnit.deptList.indexOf(o2.getTeamName());				return i1 - i2;			});			list2.sort((o1, o2) -> {				int i1 = CommonUnit.deptList.indexOf(o1.getTeamName());				int i2 = CommonUnit.deptList.indexOf(o2.getTeamName());				return i1 - i2;			});			maps.put("fj", list1);			maps.put("bm1", list2);			roleList.add("fj");			roleList.add("bm1");			maps.put("role", roleList);		} else if (bmList.contains(unitId)) {			//市局部门权限			List<TeamInfoVo> list1 = teamBuildMapper.findAllTeam("0", "1");			if (list1.size() > 0){				list1.forEach(v -> {					v.setSimpleName(CommonUnit.getUnitName(v.getTeamName()));					if (v.getId().equals(unitId)) {						v.setIsZoom(true);					}				});			}			list1.sort((o1, o2) -> {				int i1 = CommonUnit.deptList.indexOf(o1.getTeamName());				int i2 = CommonUnit.deptList.indexOf(o2.getTeamName());				return i1 - i2;			});			maps.put("bm1", list1);			roleList.add("bm1");			maps.put("role", roleList);		} else if (fjList.contains(unitId)) {			//分局权限			List<TeamInfoVo> list1 = teamBuildMapper.findAllTeam("1", "0");			if (list1.size() > 0){				list1.forEach(v -> {					v.setSimpleName(CommonUnit.getUnitName(v.getTeamName()));					if (v.getId().equals(unitId)) {						v.setIsZoom(true);					}				});			}			list1.sort((o1, o2) -> {				int i1 = CommonUnit.deptList.indexOf(o1.getTeamName());				int i2 = CommonUnit.deptList.indexOf(o2.getTeamName());				return i1 - i2;			});			maps.put("fj", list1);			roleList.add("fj");			maps.put("role", roleList);		} else if (bmList.contains(unitInfo.getParentId())) {			//部门下级部门权限			List<TeamInfoVo> teamInfoVoList = new ArrayList<>();			sysDeptDao.findByParentIdAndDelStatus(unitInfo.getParentId(), 0).forEach(v -> {				TeamInfoVo teamInfoVo = new TeamInfoVo();				teamInfoVo.setId(v.getId());				teamInfoVo.setTeamName(v.getUnitName());				teamInfoVoList.add(teamInfoVo);			});			if (teamInfoVoList.size() > 0){				teamInfoVoList.forEach(v -> {					v.setSimpleName(CommonUnit.getUnitName(v.getTeamName()));					if (v.getId().equals(unitId)) {						v.setIsZoom(true);					}				});			}			teamInfoVoList.sort((o1, o2) -> {				int i1 = CommonUnit.deptList.indexOf(o1.getTeamName());				int i2 = CommonUnit.deptList.indexOf(o2.getTeamName());				return i1 - i2;			});			maps.put("bm2", teamInfoVoList);			roleList.add("bm2");			maps.put("role", roleList);		} else if (fjList.contains(unitInfo.getParentId())) {			//分局下级部门和派出所权限			List<TeamInfoVo> teamInfoVoList = new ArrayList<>();			sysDeptDao.findByParentIdAndDelStatus(unitInfo.getParentId(), 0).forEach(v -> {				TeamInfoVo teamInfoVo = new TeamInfoVo();				if(unitInfo.getUnitName().endsWith("派出所")){					if (v.getUnitName().contains(PersonStereoConstant.policeStation.getData())) {						teamInfoVo.setId(v.getId());						teamInfoVo.setTeamName(v.getUnitName());						teamInfoVoList.add(teamInfoVo);					}				}else{					if (!v.getUnitName().contains(PersonStereoConstant.policeStation.getData())) {						teamInfoVo.setId(v.getId());						teamInfoVo.setTeamName(v.getUnitName());						teamInfoVoList.add(teamInfoVo);					}				}			});			if (teamInfoVoList.size() > 0){				teamInfoVoList.forEach(v -> {					v.setSimpleName(CommonUnit.getUnitName(v.getTeamName()));					if (v.getId().equals(unitId)) {						v.setIsZoom(true);					}				});			}			teamInfoVoList.sort((o1, o2) -> {				int i1 = CommonUnit.deptList.indexOf(o1.getTeamName());				int i2 = CommonUnit.deptList.indexOf(o2.getTeamName());				return i1 - i2;			});			maps.put(unitInfo.getUnitName().endsWith("派出所")?"pcs":"bm2", teamInfoVoList);			roleList.add(unitInfo.getUnitName().endsWith("派出所")?"pcs":"bm2");			maps.put("role", roleList);		}else if(zzbSubList.contains(unitId)){			List<TeamInfoVo> teamInfoVoList = new ArrayList<>();			for (String s : zzbSubList) {				SysDeptDo dept = sysDeptDao.findByIdAndDelStatus(s, 0);				TeamInfoVo team = new TeamInfoVo();				team.setId(s);				team.setIsZoom(false);				team.setTeamName(dept.getUnitName());				team.setSimpleName(CommonUnit.getUnitName(dept.getUnitName()));				teamInfoVoList.add(team);			}			maps.put("bm2", teamInfoVoList);			roleList.add("bm2");			maps.put("role", roleList);		}		return maps;	}	/**	 * 获取子部门信息	 */	public ResultModel getChildUnit(String unitId) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		//子部门list		List<SysDeptDo> childUnitList = new ArrayList<>();		if (CommonUnit.ZZB_ID.equals(unitId)) {			childUnitList.addAll(sysDeptDao.findAllByIdInAndDelStatus(zzbSubList, 0));		} else {			childUnitList.addAll(sysDeptDao.findByParentIdAndDelStatus(unitId, 0));		}		List<TeamInfoVo> teamInfoVoList = new ArrayList<>();		if (childUnitList.size() > 0) {			childUnitList.forEach(v -> {				TeamInfoVo teamInfoVo = new TeamInfoVo();				if (StringUtils.isNotEmpty(v.getDeptLevel()) && Integer.parseInt(v.getDeptLevel()) <= 3) {					teamInfoVo.setTeamName(v.getUnitName());					teamInfoVo.setId(v.getId());					teamInfoVo.setIsZoom(false);					teamInfoVoList.add(teamInfoVo);				}			});		}		if (teamInfoVoList.size() > 0){			teamInfoVoList.forEach(v -> {				v.setSimpleName(CommonUnit.getUnitName(v.getTeamName()));			});		}		Map<String, Object> maps = new HashMap<>(16);		//权限List		List<String> roleList = new ArrayList<>();		maps.put("bm2", teamInfoVoList);		roleList.add("bm2");		maps.put("role", roleList);		resultModel.setResult(maps);		return resultModel;	}	/**	 * 年龄结构对比	 */	public ResultModel getAgeComparison(TeamSelect teamSelect) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, Object>> mapList = new ArrayList<>();		for (String unitId:teamSelect.getUnitId()){			ChildUnit childUnit = new ChildUnit();			//根据单位id得到所有人员身份证号			List<String> idNoList = new ArrayList<>(childUnit.getSubPersonIdNos(unitId));			List<AgeDetailVo> resultList = new ArrayList<>();			if (idNoList.size() > 0){				//查询年龄结构信息				resultList.addAll(teamBuildMapper.findAgeDetail(idNoList));			}			//35岁以下人员数量			long youngCount = resultList.stream().filter(v -> v.getAge() < 35).count();			//35（含）-50岁人员数量			long middleCount = resultList.stream().filter(v -> v.getAge() >= 35).filter(v -> v.getAge() < 50).count();			//50岁（含）以上人员数量			long oldCount = resultList.stream().filter(v -> v.getAge() >= 50).count();			//初始化echarts数据结构			EchartsVo[] echartsVo = new EchartsVo[3];			for(int i=0; i<3; i++){				echartsVo[i]=new EchartsVo();			}			echartsVo[0].setName("35岁以下");			echartsVo[0].setValue(String.valueOf(youngCount));			echartsVo[1].setName("35-50岁");			echartsVo[1].setValue(String.valueOf(middleCount));			echartsVo[2].setName("50岁以上");			echartsVo[2].setValue(String.valueOf(oldCount));			List<EchartsVo> echartsVoList = new ArrayList<>(Arrays.asList(echartsVo));			mapList.add(new HashMap<String, Object>(){{				put("name", sysDeptDao.findByIdAndDelStatus(unitId, 0).getUnitName());				put("chart", echartsVoList);			}});		}		resultModel.setResult(mapList);		return resultModel;	}	/**	 * 年龄结构对比详情	 */	public ResultModel getAgeComparisonDetail(DetailParamPojo detailParamPojo) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		String unitId1 = detailParamPojo.getUnitId();		ChildUnit childUnit = new ChildUnit();		//根据单位id得到所有人员身份证号		List<String> idNoList = new ArrayList<>(childUnit.getSubPersonIdNos(unitId1));		List<AgeDetailVo> resultList = new ArrayList<>();		if (idNoList.size() > 0){			//查询年龄结构信息			resultList.addAll(teamBuildMapper.findAgeDetail(idNoList));		}		if("35岁以下".equals(detailParamPojo.getType())){			resultList = resultList.stream().filter(v -> v.getAge() < 35).collect(Collectors.toList());		}		if("35-50岁".equals(detailParamPojo.getType())){			resultList=resultList.stream().filter(v -> v.getAge() >= 35).filter(v -> v.getAge() < 50).collect(Collectors.toList());		}		if("50岁以上".equals(detailParamPojo.getType())){			resultList=resultList.stream().filter(v->v.getAge()>=50).collect(Collectors.toList());		}		resultModel.setResult(resultList);		return resultModel;	}	/**	 * 教育培训对比	 */	public ResultModel getTrainComparison(TeamSelect teamSelect) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, Object>> mapList = new ArrayList<>();		List<String> dateList  = new ArrayList<>();		if(StringUtils.isNotBlank(teamSelect.getStartYear()) && StringUtils.isNotBlank(teamSelect.getEndYear())) {			dateList.addAll(DateUtil.getYears(teamSelect.getStartYear(), teamSelect.getEndYear()));		}		for (String unitId : teamSelect.getUnitId()) {			ChildUnit childUnit = new ChildUnit();			//根据单位id得到所有人员身份证号			List<String> idNoList = new ArrayList<>(childUnit.getSubPersonIdNos(unitId));			List<TrainCountVo> countList = new ArrayList<>();			if (idNoList.size() > 0){				//教育培训按年份统计次数				countList.addAll(teamComparisonMapper.findTrainCountByYear(idNoList, teamSelect));			}			List<TrainCountVo> trainCountVoList1 = new ArrayList<>();			if(dateList.size() >0) {				dateList.forEach(v->{					TrainCountVo trainCountVo = new TrainCountVo();					trainCountVo.setYear(v);					trainCountVo.setCount("0");					if(countList.size() >0) {						countList.forEach(t->{							if(v.equals(t.getYear())) {								trainCountVo.setCount(t.getCount());							}						});					}					trainCountVoList1.add(trainCountVo);				});			}else {				trainCountVoList1.addAll(countList);			}			List<EchartsVo> echartsVoList = new ArrayList<>();			if (trainCountVoList1.size() > 0){				trainCountVoList1.forEach(s -> {					EchartsVo echartsVo = new EchartsVo();					echartsVo.setName(s.getYear());					echartsVo.setValue(s.getCount());					echartsVoList.add(echartsVo);				});			}			mapList.add(new HashMap<String, Object>(){{				put("name", sysDeptDao.findByIdAndDelStatus(unitId, 0).getUnitName());				put("chart", echartsVoList);			}});		}		resultModel.setResult(mapList);		return resultModel;	}	/**	 * 教育培训对比详情	 */	public ResultModel getTrainComparisonDetail(DetailParamPojo detailParamPojo) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, Object>> mapList = new ArrayList<>();		List<String> dateList  = new ArrayList<>();		System.out.println("===="+detailParamPojo);		if(StringUtils.isNotBlank(detailParamPojo.getStartYear()) && StringUtils.isNotBlank(detailParamPojo.getEndYear())) {			dateList.addAll(DateUtil.getYears(detailParamPojo.getStartYear(), detailParamPojo.getEndYear()));		}		String unitId1 = detailParamPojo.getUnitId();		ChildUnit childUnit = new ChildUnit();		//根据单位id得到所有人员身份证号		List<String> idNoList = new ArrayList<>(childUnit.getSubPersonIdNos(unitId1));		List<SelectDetailTrainVo> countList = new ArrayList<>();		if (idNoList.size() > 0){			//教育培训按年份统计次数			countList.addAll(teamComparisonMapper.findTrainDetailByYear(idNoList, detailParamPojo));		}		//获取筛选条件		String type = detailParamPojo.getType();		if(type!=null){			countList=countList.stream().filter(v->type.equals(v.getTrainingStartTime())).collect(Collectors.toList());		}		resultModel.setResult(countList);		return resultModel;	}	/**	 * 集体荣誉对比	 */	public ResultModel getOrgHonorComparison(TeamSelect teamSelect) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, OrgHonorByYearVo>> mapList = new ArrayList<>();		List<String> dateList  = new ArrayList<>();		if(StringUtils.isNotBlank(teamSelect.getStartYear()) && StringUtils.isNotBlank(teamSelect.getEndYear())) {			dateList.addAll(DateUtil.getYears(teamSelect.getStartYear(), teamSelect.getEndYear()));		}		for (String unitId : teamSelect.getUnitId()) {			OrgHonorByYearVo orgHonorByYearVo = new OrgHonorByYearVo();			//单位名称			String name = sysDeptDao.findByIdAndDelStatus(unitId, 0).getUnitName();			//按年份查询集体荣誉			List<TrainCountVo> trainCountVoList = teamComparisonMapper.findOrgHonorCountByYear("%" + name + "%", teamSelect);			List<TrainCountVo> trainCountVoList1 = new ArrayList<>();			if(dateList.size() >0) {				dateList.forEach(v->{					TrainCountVo trainCountVo = new TrainCountVo();					trainCountVo.setYear(v);					trainCountVo.setCount("0");					if(trainCountVoList.size() >0) {						trainCountVoList.forEach(t->{							if(v.equals(t.getYear())) {								trainCountVo.setCount(t.getCount());							}						});					}					trainCountVoList1.add(trainCountVo);				});			}else {				trainCountVoList1.addAll(trainCountVoList);			}			if(trainCountVoList1.size() >0) {				orgHonorByYearVo.setTrainCountVoList(trainCountVoList1);				TrainCountVo maxHonor = trainCountVoList1.stream().max(Comparator.comparing(TrainCountVo::getCount)).get();				orgHonorByYearVo.setMaxHonor(maxHonor);				Map<String, OrgHonorByYearVo> map = new LinkedHashMap<>();				map.put(name,orgHonorByYearVo);				mapList.add(map);			}		}		resultModel.setResult(mapList);		return resultModel;	}	/**	 * 集体荣誉对比 详情	 */	public ResultModel getOrgHonorComparisonDetail(DetailParamPojo detailParamPojo) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, OrgHonorByYearVo>> mapList = new ArrayList<>();		List<String> dateList  = new ArrayList<>();		String unitId1 = detailParamPojo.getUnitId();		String unitName = sysDeptDao.findByIdAndDelStatus(unitId1, 0).getUnitName();		List<SelectHonorDetailVo> honorDetailVoList=new ArrayList<>();		//获取筛选条件		String type = detailParamPojo.getType();		//按年份查询集体荣誉		if(type!=null){			honorDetailVoList = teamComparisonMapper.findOrgHonorDetailByYear("%" + unitName + "%", detailParamPojo).stream().filter(v->v.getHdate()!=null).filter(c->type.equals(c.getHdate().substring(0,4))).collect(Collectors.toList());		}else{			honorDetailVoList = teamComparisonMapper.findOrgHonorDetailByYear("%" + unitName + "%", detailParamPojo);		}		resultModel.setResult(honorDetailVoList);		return resultModel;	}	/**	 * 个人荣誉对比	 */	public ResultModel getPersonHonorComparison(TeamSelect teamSelect) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, OrgHonorByYearVo>> mapList = new ArrayList<>();		List<String> dateList = new ArrayList<>();		if(StringUtils.isNotBlank(teamSelect.getStartYear()) && StringUtils.isNotBlank(teamSelect.getEndYear())) {			dateList.addAll(DateUtil.getYears(teamSelect.getStartYear(), teamSelect.getEndYear()));		}		for (String unitId : teamSelect.getUnitId()) {			OrgHonorByYearVo orgHonorByYearVo = new OrgHonorByYearVo();			ChildUnit childUnit = new ChildUnit();			//根据单位id得到所有人员身份证号			List<String> idNoList = new ArrayList<>(childUnit.getSubPersonIdNos(unitId));			if (idNoList.size() > 0){				//个人荣誉按年份统计次数				List<TrainCountVo> trainCountVoList = teamComparisonMapper.						findPersonHonorCountByIdNoAndYear(idNoList, teamSelect);				List<TrainCountVo> trainCountVoList1 = new ArrayList<>();				if(dateList.size() >0) {					dateList.forEach(v->{						TrainCountVo trainCountVo = new TrainCountVo();						trainCountVo.setYear(v);						trainCountVo.setCount("0");						if(trainCountVoList.size() >0) {							trainCountVoList.forEach(t->{								if(v.equals(t.getYear())) {									trainCountVo.setCount(t.getCount());								}							});						}						trainCountVoList1.add(trainCountVo);					});				}else {					trainCountVoList1.addAll(trainCountVoList);				}				if(trainCountVoList1.size() >0) {					orgHonorByYearVo.setTrainCountVoList(trainCountVoList1);					TrainCountVo maxHonor = trainCountVoList1.stream().max(Comparator.comparing(TrainCountVo::getCount)).get();					orgHonorByYearVo.setMaxHonor(maxHonor);					Map<String, OrgHonorByYearVo> map = new LinkedHashMap<>();					map.put(sysDeptDao.findByIdAndDelStatus(unitId, 0).getUnitName(),orgHonorByYearVo);					mapList.add(map);				}			}		}		resultModel.setResult(mapList);		return resultModel;	}	/**	 * 个人荣誉对比 详情	 */	public ResultModel getPersonHonorComparisonDetail(DetailParamPojo detailParamPojo) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<SelectPersonHonorDetailVo> personHonorVoList=new ArrayList<>();		String unitId1 = detailParamPojo.getUnitId();		ChildUnit childUnit = new ChildUnit();		//根据单位id得到所有人员身份证号		List<String> idNoList = new ArrayList<>(childUnit.getSubPersonIdNos(unitId1));		//获取筛选条件		String type = detailParamPojo.getType();		if (idNoList.size() > 0){			if(type!=null){				personHonorVoList = teamComparisonMapper.						findPersonHonorDetailByIdNoAndYear(idNoList, detailParamPojo).stream().filter(v->type.equals(v.getApprovalDate())).collect(Collectors.toList());			}else{				personHonorVoList = teamComparisonMapper.						findPersonHonorDetailByIdNoAndYear(idNoList, detailParamPojo);			}		}		System.out.println("人荣誉对比-详情-查出数据量"+personHonorVoList.size());		resultModel.setResult(personHonorVoList);		return resultModel;	}//    /**//     * 服务满意度对比//     *///    public ResultModel getSatisfiedComparison(TeamSelect teamSelect) {//        //返回给前端的数据//        ResultModel resultModel = new ResultModel();//        List<Map<String, Object>> mapList = new ArrayList<>();//        List<Map<String, String>> allList = satisfiedDataSevice.getSatisfiedComparisonBySql(teamSelect.getUnitId(), teamSelect.getYear());//        if (teamSelect.getUnitId().size() > 0){//            teamSelect.getUnitId().forEach(v -> {//                //单位名称//                String name = sysDeptDao.findByIdAndDelStatus(v, 0).getUnitName();//                List<Map<String, String>> oneUnitList = allList.stream().filter(a -> v.equals(a.get("unitId"))).collect(Collectors.toList());//                final double[] valueCount = {0};//                String avgValue = null;//                if (oneUnitList.size() > 0) {//                    oneUnitList.forEach(b -> valueCount[0] = valueCount[0] + Double.parseDouble(b.get("value")));//                    avgValue = String.valueOf(valueCount[0] / (double) oneUnitList.size());//                }//                String finalAvgValue = avgValue;//                mapList.add(new HashMap<String, Object>() {{//                    put("name", name);//                    put("chart", StringUtils.isNotEmpty(finalAvgValue)?String.format("%.2f", Double.parseDouble(finalAvgValue)):null);//                }});//            });//        }//        resultModel.setResult(mapList);//        return resultModel;//    }	/**	 * 服务满意度对比	 */	public ResultModel getSatisfiedComparison(TeamSelect teamSelect) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, Object>> mapList = new ArrayList<>();		List<String> years = new ArrayList<>();		int startYear, endYear;		if (StringUtils.isNotEmpty(teamSelect.getStartYear())&&StringUtils.isNotEmpty(teamSelect.getEndYear())){			startYear = Integer.parseInt(teamSelect.getStartYear());			endYear = Integer.parseInt(teamSelect.getEndYear());		}else {			Date date=new Date();			SimpleDateFormat format=new SimpleDateFormat("yyyy");			startYear = 2015;			endYear = Integer.parseInt(format.format(date));		}		for (int i=startYear;i <= endYear;i++){			years.add(String.valueOf(i));		}		List<Map<String, String>> allList = satisfiedDataSevice.getSatisfiedComparisonBySql(teamSelect.getUnitId(), years);		if (teamSelect.getUnitId().size() > 0){			teamSelect.getUnitId().forEach(v -> {				//单位名称				String name = sysDeptDao.findByIdAndDelStatus(v, 0).getUnitName();				List<EchartsVo> echartsVoList = new ArrayList<>();				years.forEach(y -> {					EchartsVo echartsVo = new EchartsVo();					List<Map<String, String>> oneUnitList = allList.stream().filter(a -> v.equals(a.get("unitId"))).filter(a -> y.equals(a.get("date").substring(0, 4))).collect(Collectors.toList());					final double[] valueCount = {0};					String avgValue = null;					if (oneUnitList.size() > 0){						oneUnitList.forEach(b -> valueCount[0] = valueCount[0] + Double.parseDouble(b.get("value")));						avgValue = String.valueOf(valueCount[0]/(double) oneUnitList.size());					}					echartsVo.setName(y);					if (StringUtils.isNotEmpty(avgValue)){						avgValue = String.format("%.2f", Double.parseDouble(avgValue));					}					echartsVo.setValue(avgValue);					echartsVoList.add(echartsVo);				});				mapList.add(new HashMap<String, Object>(){{					put("name", name);					put("chart", echartsVoList);				}});			});		}		resultModel.setResult(mapList);		return resultModel;	}	/**	 * 服务满意度对比详情	 */	public ResultModel getSatisfiedComparisonDetail(DetailParamPojo detailParamPojo) {		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, String>> resultList = new ArrayList<>();		List<String> years = new ArrayList<>();		int startYear, endYear;        /*if (StringUtils.isNotEmpty(teamSelect.getStartYear())&&StringUtils.isNotEmpty(teamSelect.getEndYear())){            startYear = Integer.parseInt(teamSelect.getStartYear());            endYear = Integer.parseInt(teamSelect.getEndYear());        }else {            Date date=new Date();            SimpleDateFormat format=new SimpleDateFormat("yyyy");            startYear = 2015;            endYear = Integer.parseInt(format.format(date));        }*/		startYear=Integer.parseInt(detailParamPojo.getStartYear());		endYear=Integer.parseInt(detailParamPojo.getEndYear());		String unitId = detailParamPojo.getUnitId();		//获取筛选条件（年份）		String type = detailParamPojo.getType();		for (int i=startYear;i <= endYear;i++){			years.add(String.valueOf(i));		}		List<Map<String, String>> allList=new ArrayList<>();		if(unitId!=null){			allList= satisfiedDataSevice.getSatisfiedComparisonBySql(Arrays.asList(detailParamPojo.getUnitId()), years).stream().filter(v->unitId.equals(v.get("unitId"))).collect(Collectors.toList());		}		if(type!=null){			resultList=allList.stream().filter(v->v.get("YYYYMM")!=null).filter(c->type.equals(c.get("YYYYMM").substring(0,4))).collect(Collectors.toList());		}else{			resultList=allList;		}		resultModel.setResult(resultList);		return resultModel;	}	/**	 * 纪检案件对比	 */	public ResultModel getBreakRuleCaseComparison(TeamSelect teamSelect) {//        teamSelect.setYear(teamSelect.getYear() + "%");		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, OrgHonorByYearVo>> mapList = new ArrayList<>();		List<String> dateList = new ArrayList<>();		if(StringUtils.isNotBlank(teamSelect.getStartYear()) && StringUtils.isNotBlank(teamSelect.getEndYear())) {			dateList.addAll(DateUtil.getYears(teamSelect.getStartYear(), teamSelect.getEndYear()));		}		for (String unitId : teamSelect.getUnitId()) {			OrgHonorByYearVo orgHonorByYearVo = new OrgHonorByYearVo();			//单位名称			String name = sysDeptDao.findByIdAndDelStatus(unitId, 0).getUnitName();			//按年份查询纪检案件			List<TrainCountVo> echartsVoList = teamComparisonMapper.					findBreakRuleCaseCountByNameAndYear("%" + name + "%", teamSelect);			List<TrainCountVo> trainCountVoList1 = new ArrayList<>();			if(dateList.size() >0) {				dateList.forEach(v->{					TrainCountVo trainCountVo = new TrainCountVo();					trainCountVo.setYear(v);					trainCountVo.setCount("0");					if(echartsVoList.size() >0) {						echartsVoList.forEach(t->{							if(v.equals(t.getYear())) {								trainCountVo.setCount(t.getCount());							}						});					}					trainCountVoList1.add(trainCountVo);				});			}else {				trainCountVoList1.addAll(echartsVoList);			}			if(trainCountVoList1.size() >0) {				orgHonorByYearVo.setTrainCountVoList(trainCountVoList1);				TrainCountVo maxHonor = trainCountVoList1.stream().max(Comparator.comparing(TrainCountVo::getCount)).get();				orgHonorByYearVo.setMaxHonor(maxHonor);				Map<String, OrgHonorByYearVo> map = new LinkedHashMap<>();				map.put(name,orgHonorByYearVo);				mapList.add(map);			}			//统计当前年份纪检案件总数//            final int[] count = {0};//            if (echartsVoList.size() > 0){//                echartsVoList.forEach(v -> count[0] = count[0] + Integer.parseInt(v.getValue()));//            }//            mapList.add(new HashMap<String, Object>(){{//                put("name", name);//                put("chart", echartsVoList);//                put("count", count[0]);//            }});		}		resultModel.setResult(mapList);		return resultModel;	}	/**	 * 纪检案件对比详情	 */	public ResultModel getBreakRuleCaseComparisonDetail(DetailParamPojo detailParamPojo) {//        teamSelect.setYear(teamSelect.getYear() + "%");		//返回给前端的数据		ResultModel resultModel = new ResultModel();		List<Map<String, OrgHonorByYearVo>> mapList = new ArrayList<>();		List<String> dateList = new ArrayList<>();		String unitId1 = detailParamPojo.getUnitId();		//单位名称		String name = sysDeptDao.findByIdAndDelStatus(unitId1, 0).getUnitName();		List<SelectBreakRuleDetailPojo> breakRuleDetailVoList=new ArrayList<>();		//获取筛选条件		String type = detailParamPojo.getType();		//按年份查询纪检案件		if(type!=null){			breakRuleDetailVoList=teamComparisonMapper.					findBreakRuleCaseCountByNameAndYearDetail("%" + name + "%", detailParamPojo).stream().filter(v->v.getCfjdsj()!=null).filter(v->v.getCfjdsj().substring(0,4).equals(type)).collect(Collectors.toList());		}else{			breakRuleDetailVoList=teamComparisonMapper.					findBreakRuleCaseCountByNameAndYearDetail("%" + name + "%", detailParamPojo);		}		resultModel.setResult(breakRuleDetailVoList);		return resultModel;	}	public ResultModel getKPIComparison(TeamSelect teamSelect) {		List<Integer> years= new ArrayList<>();		Integer startYear = Integer.parseInt(teamSelect.getStartYear());		Integer endYear = Integer.parseInt(teamSelect.getEndYear());		for (int i = startYear; i <= endYear; i++) {			years.add(i);		}		List<Map<String,Object>> result= new ArrayList<>();		for (String unitId : teamSelect.getUnitId()) {			List<Map<String,Object>> chart = new ArrayList<>();			String unitName = sysDeptDao.getOne(unitId).getUnitName();			KPIQuery query = new KPIQuery();			for (Integer year : years) {				if(year<2018){					continue;				}				query.setMenu(Arrays.asList(String.valueOf(year)));				query.setUnitId(unitId);				query.setIsDownload(false);				List<Map<String, Object>> data = (List<Map<String, Object>>) teamBuildService.getKPI(query).getData();				Collections.reverse(data);				List<Map<String, Object>> chartData = new ArrayList<>();				for (Map<String, Object> map : data) {					if(!endYear.equals(startYear)&&"全年".equals(String.valueOf(map.get("QUARTER")))){						Map<String, Object> m = new HashMap<>();						m.put("name",map.get("YEAR")+"年"+map.get("QUARTER"));						m.put("value",String.valueOf(map.get("SCORE")).trim());						chartData.add(m);					}else if(endYear.equals(startYear)&&!"全年".equals(String.valueOf(map.get("QUARTER")))){						Map<String, Object> m = new HashMap<>();						m.put("name",map.get("YEAR")+"年"+map.get("QUARTER"));						m.put("value",String.valueOf(map.get("SCORE")).trim());						chartData.add(m);					}				}				chart.addAll(chartData);			}			Map<String, Object> map = new HashMap<>();			map.put("name", unitName);			map.put("chart",chart);			result.add(map);		}		return ResultModel.success(result);	}}