package com.sugon.analysis.service;import com.sugon.analysis.domain.data.object.oracle.*;import com.sugon.analysis.domain.data.query.*;import com.sugon.analysis.domain.data.subset.CompanyNew;import com.sugon.analysis.domain.view.persondraw.OpinionAndJcjVo;import com.sugon.analysis.domain.view.return2view.*;import com.sugon.analysis.mappper.oracle.PersonalAnalysisMapper;import com.sugon.analysis.platform.entity.BeTheBestEntity;import com.sugon.analysis.platform.entity.BeTheBestInfoEntity;import com.sugon.analysis.platform.repository.BeTheBestInfoRepository;import com.sugon.analysis.platform.repository.BeTheBestRepository;import com.sugon.analysis.repository.oracle.*;import com.sugon.analysis.util.ChildUnit;import com.sugon.analysis.util.CommonUnit;import com.sugon.analysis.util.DateUtil;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang.StringUtils;import org.springframework.data.domain.Example;import org.springframework.data.mongodb.core.MongoTemplate;import org.springframework.jdbc.core.JdbcTemplate;import org.springframework.stereotype.Service;import javax.annotation.Resource;import java.text.DecimalFormat;import java.text.ParseException;import java.text.SimpleDateFormat;import java.time.LocalDate;import java.time.format.DateTimeFormatter;import java.time.temporal.ChronoUnit;import java.util.*;import java.util.concurrent.atomic.AtomicInteger;import java.util.stream.Collectors;import java.util.stream.Stream;import static com.sugon.analysis.util.ChildUnit.NJSGAJ_ID;import static java.util.stream.Collectors.toList;/** * @author: create by huangxb * @version: v1.0 * @description: * @date:2019/11/28 */@Slf4j@Servicepublic class PersonalAnalysisService extends PersonBaseService {	@Resource	private TPersonDao tPersonDao;	@Resource	private SysUserDao sysUserDao;	@Resource	private SysDeptDao sysDeptDao;	@Resource	private SgQueryCategoryDao sgQueryCategoryDao;	@Resource	private TResumeInfoDao tResumeInfoDao;	@Resource	private TPoliceRankInfoDao tPoliceRankInfoDao;	@Resource	private TCommendInfoDao tCommendInfoDao;	@Resource	private TEducationDao tEducationDao;	@Resource	private MongoTemplate mongoTemplate;	@Resource	private PersonalAnalysisMapper personalAnalysisMapper;	@Resource	private SatisfiedDataSevice satisfiedDataSevice;	@Resource	private TPersonLabelDao tPersonLabelDao;	@Resource	private TJobInfoDao tJobInfoDao;	@Resource	private ChildUnit childUnit;	/****************************************************	 * @一些常量的定义	 ***************************************************/	private static final int ELEVEN = 11;	private static final int FIVE = 5;	private static final int SIX = 6;	private static final String EDUCATION = "学历";	/**	 * @市局id	 */	private static final String URBAN = "2014110416460086100000002942";	private static final String TWO = "2";	private static final String THREE = "3";	private static final int THIRTY_FIVE = 35;	private static final int FIFTY = 50;	private static final int FIFTY_ONE = 51;	private static final int TWENTY = 20;	private static final String AGE = "年龄";	private static final String POLICE_RANK = "警衔";	private static final String SOURCE = "来源";	private static final String INTEGRATED_MANAGMENT_CODE = "00602";	private static final String LAW_ENFORCEMENT_CODE = "00604";	private static final String POLICING_TECHNIQUES_CODE = "00606";	private static final String INTEGRATED_MANAGMENT = "综合管理";	private static final String LAW_ENFORCEMENT = "执法勤务";	private static final String POLICING_TECHNIQUES = "警务技术";	private static final String ALL = "全部";	private static final String FIRST_LEVEL = "一等功";	private static final String SECOND_LEVEL = "二等功";	private static final String THIRD_LEVEL = "三等功";	/**	 * 党员预备党员	 */	private String[] politicalArray = new String[]{"01", "02"};	private DecimalFormat decimalFormat = new DecimalFormat("0.00");	/**	 * 功勋类型	 */	private String[] personRewordTypes = new String[]{"革命烈士", "全国公安系统一级英雄模范", "全国公安系统二级英雄模范",			"全国劳模", "全国特级优秀人民警察", "全国优秀人民警察", "全国三八红旗手", "省劳模", "省三八红旗手",			"省五四青年奖章", "市劳动模范", "市三八红旗手"};	/**	 * 个人荣誉排名1	 */	private static List<String> personRewordOne = Stream.of(			"革命烈士", "全国公安系统一级英雄模范", "全国公安系统二级英雄模范",			"全国劳模", "全国特级优秀人民警察", "全国优秀人民警察", "全国三八红旗手"	).collect(toList());	/**	 * 个人荣誉排名2	 */	private static List<String> personRewordTwo = Stream.of(			"省劳模", "省三八红旗手",			"省五四青年奖章", "江苏好青年"	).collect(toList());	/**	 * 个人荣誉排名3	 */	private static List<String> personRewordThree = Stream.of(			"市劳动模范", "省优秀共青团干部", "省优秀共青团员", "感动南京年度人物",			"市三八红旗手", "市十大杰出青年", "市五四青年奖章", "市最美老干部"	).collect(toList());	@Resource(name = "tertiaryJdbcTemplate")	private JdbcTemplate tertiaryJdbcTemplate;	@Resource	private BeTheBestRepository beTheBestRepository;	@Resource	private BeTheBestInfoRepository beTheBestInfoRepository;	/**	 * @param idNumber	 * @return 得到初映像话描述	 */	public FirstImpressionVo getFirstImpression(String idNumber) {		FirstImpressionVo firstImpressionVo = new FirstImpressionVo();		String ageContent;		String deptName = "";		String politicalContent;		List<String> politicalList = Arrays.asList(politicalArray);		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNumber, "0");		if (tPersonDo != null) {			//获取入职日期			LocalDate timeToWorkPsb = LocalDate.parse(tPersonDo.getTimeToWorkPsb(), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.s"));			long year = ChronoUnit.YEARS.between(timeToWorkPsb, LocalDate.now());			if (year <= FIVE) {				ageContent = "我是一名入警" + year + "年的新警";			} else if (year <= TWENTY) {				ageContent = "我是一名入警" + year + "年的资深民警";			} else {				ageContent = "我是一名入警" + year + "年的资深民警";			}			firstImpressionVo.setAgeContent(ageContent);			List<SysUserDo> sysUserDoList = sysUserDao.findAllByIdentitynumAndDelStatusAndPostType(idNumber, "0",0);			if (sysUserDoList.size() > 0) {				SysDeptDo sysDeptDo = sysDeptDao.findByIdAndDelStatus(sysUserDoList.get(0).getDeptId(), 0);				if (sysDeptDo != null) {					deptName = sysDeptDo.getUnitName();				}			}			//职务职级			if (StringUtils.isNotBlank(tPersonDo.getPoliceJobGrade())) {				//根据职务代码查询职务				List<TJobInfoDo> tJobInfoDoList = tJobInfoDao.						findAllByIdNoAndDelStatusOrderByDataSourceId(idNumber, 0);				if (tJobInfoDoList.size() > 0) {					firstImpressionVo.setDutyContent("现任" + deptName + tJobInfoDoList.get(0).getJobTitle());				}			} else {				//根据职级去查				SgQueryCategoryDo sgQueryCategory = sgQueryCategoryDao.						findByCvTypeAndCvFlag("AK", tPersonDo.getJobGrade());				String dutyContent = "现任" + deptName + sgQueryCategory.getCvName() + "";				firstImpressionVo.setDutyContent(dutyContent);			}			if (StringUtils.isNotBlank(tPersonDo.getPoliticalStatus()) &&					politicalList.contains(tPersonDo.getPoliticalStatus())) {				int age = 0;				if (StringUtils.isNotBlank(tPersonDo.getJoinPartyTime())) {					//入党时间不为空的情况下					try {						Date time = DateUtil.parse(tPersonDo.getJoinPartyTime());						try {							age = DateUtil.getAge(time);						} catch (Exception e) {							e.printStackTrace();						}					} catch (ParseException e) {						e.printStackTrace();					}				}				if (age < SIX) {					politicalContent = "是中国共产党的新生代力量";				} else if (age < ELEVEN) {					politicalContent = "是中国共产党的中生代力量";				} else {					politicalContent = "是中国共产党的中坚力量";				}				firstImpressionVo.setPoliticalContent(politicalContent);			}			return firstImpressionVo;		} else {			return null;		}	}	/**	 * @param idNumber	 * @return 个人初映像描述	 */	public FirstLabelImpressionVo getFirstLabelImpression(String idNumber) {		FirstLabelImpressionVo firstLabelImpressionVo = new FirstLabelImpressionVo();		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNumber, "0");		List<String> politicalList = Arrays.asList(politicalArray);		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		if (tPersonDo != null) {			//参加公安时间			if (StringUtils.isNotBlank(tPersonDo.getTimeToWorkPsb())) {				LocalDate time = LocalDate.parse(tPersonDo.getTimeToWorkPsb().substring(0, 10), DateTimeFormatter.ofPattern("yyyy-MM-dd"));				int year = time.getYear();				int moth = time.getMonthValue();				firstLabelImpressionVo.setPoliceContent(year + "年" + moth + "月,光荣加入人民警察队伍");			}			//参入共产党时间			if (StringUtils.isNotBlank(tPersonDo.getPoliticalStatus()) &&					politicalList.contains(tPersonDo.getPoliticalStatus())					&& StringUtils.isNotBlank(tPersonDo.getJoinPartyTime())) {				LocalDate time = LocalDate.parse(tPersonDo.getJoinPartyTime().substring(0, 10), DateTimeFormatter.ofPattern("yyyy-MM-dd"));				int year = time.getYear();				int moth = time.getMonthValue();				firstLabelImpressionVo.setPoliticalContent(year + "年" + moth + "月,正式成为一名共产党员");			}			//最近一次的职务时间			List<TJobInfoDo> tJobInfoDoList = tJobInfoDao.					findAllByIdNoAndDelStatusOrderByDataSourceId(idNumber, 0);			if (tJobInfoDoList.size() > 0) {				LocalDate time = LocalDate.parse(formatter.format(tJobInfoDoList.get(0).getDurationOfService()).substring(0, 10), DateTimeFormatter.ofPattern("yyyy-MM-dd"));				int year = time.getYear();				int moth = time.getMonthValue();				SgQueryCategoryDo sgQueryCategory = sgQueryCategoryDao.						findByCvTypeAndCvFlag("XG", tJobInfoDoList.get(0).getJobGrade());				if (sgQueryCategory != null) {					firstLabelImpressionVo.setDutyContent(year + "年" + moth + "月,任" + sgQueryCategory.getCvName());				}			}			//最近一次的警衔			List<TPoliceRankInfoDo> tPoliceRankInfoDoList = tPoliceRankInfoDao.					findAllByIdNoAndDelStatus(idNumber, 0);			if (tPoliceRankInfoDoList.size() > 0) {				List<TPoliceRankInfoDo> tPoliceRankInfoDoList1 = tPoliceRankInfoDoList.						stream().						filter(v -> v.getTitleTime() != null && v.getTitle() != null)						.sorted(Comparator.comparing(TPoliceRankInfoDo::getTitleTime).reversed()).								collect(Collectors.toList());				if (tPoliceRankInfoDoList1.size() > 0) {					LocalDate time = LocalDate.parse(formatter.format(tPoliceRankInfoDoList1.get(0).getTitleTime()).substring(0, 10), DateTimeFormatter.ofPattern("yyyy-MM-dd"));					int year = time.getYear();					int moth = time.getMonthValue();					SgQueryCategoryDo sgQueryCategory = sgQueryCategoryDao.							findByCvTypeAndCvFlag("XA", tPoliceRankInfoDoList1.get(0).getTitle());					firstLabelImpressionVo.setPoliceRankContent(year + "年" + moth + "月,授予" + sgQueryCategory.getCvName() + "警衔");				}			}			//专业人才表无等待添加			//查询333专业人才			List<String> awardNames = Arrays.asList(personRewordTypes);			List<TPersonLabelDo> tPersonLabelDoList = tPersonLabelDao.					findByIdNoAndDelStatusAndLabelType(idNumber, 0, "1");			if (tPersonLabelDoList.size() > 0) {				String year = "";				if (tPersonLabelDoList.get(0).getLabelYear() != null) {					year = tPersonLabelDoList.get(0).getLabelYear();				}				String content = year + ",被评为333专业人才";				if (content.startsWith(",")) {					content = content.substring(1);				}				firstLabelImpressionVo.setTalentsContent(content);			}			List<TPersonLabelDo> tPersonLabelDoList1 = tPersonLabelDao.					findByIdNoAndDelStatusAndLabelType(idNumber, 0, "2");			if (tPersonLabelDoList1.size() > 0) {				String year = "";				if (tPersonLabelDoList1.get(0).getLabelYear() != null) {					year = tPersonLabelDoList1.get(0).getLabelYear();				}				String content1 = year + ",授予司法证书";				if (content1.startsWith(",")) {					content1 = content1.substring(1);				}				firstLabelImpressionVo.setFxContent(content1);			}			List<TPersonLabelDo> tPersonLabelDoList2 = tPersonLabelDao.					findByIdNoAndDelStatusAndLabelType(idNumber, 0, "3");			if (tPersonLabelDoList2.size() > 0) {				String year = "";				if (tPersonLabelDoList2.get(0).getLabelYear() != null) {					year = tPersonLabelDoList2.get(0).getLabelYear();				}				String content2 = year + ",授予兼职教官";				if (content2.startsWith(",")) {					content2 = content2.substring(1);				}				firstLabelImpressionVo.setJzContent(content2);			}			//个人荣誉			List<TCommendInfoDo> tCommendInfoDoList = tCommendInfoDao.findAllByAwardNameAndIdno(idNumber, awardNames);			if (tCommendInfoDoList.size() > 0) {				firstLabelImpressionVo.setHonorContent("获得三等功以上表彰" + tCommendInfoDoList.size() + "项");			}		}		return firstLabelImpressionVo;	}	/**	 * @param locationQo	 * @return 找位置统计	 */	public LocationVo getLocation(LocationQo locationQo) {		LocationVo locationVo = new LocationVo();		Map<String, Map<String, Integer>> dutyRank = new HashMap<>(10);		//根据人员的身份证号判断该人员的部门		SysUserDo sysUserDo = sysUserDao.				findByIdentitynumAndDelStatusAndPostType(locationQo.getIdNumber(), "0", 0);		if (sysUserDo != null) {			TPersonDo tPersonDo = tPersonDao.					findByIdNoAndDelStatus(locationQo.getIdNumber(), "0");			List<String> idNos = childUnit.getSubPersonIdNos(sysUserDo.getDeptId());			if (EDUCATION.equals(locationQo.getType())) {				//调用学历的方法				locationVo = getEducationCount(idNos, locationQo.getIdNumber());			}			if (AGE.equals(locationQo.getType())) {				locationVo = getAnalysisAge(idNos, tPersonDo);			}			if (POLICE_RANK.equals(locationQo.getType())) {				locationVo = getAnalysisPoliceRank(idNos, tPersonDo);			}			if (SOURCE.equals(locationQo.getType())) {				locationVo = getAnalysisSource(idNos, locationQo.getIdNumber());			}			if (DUTY.equals(locationQo.getType())) {				locationVo = getAnalysisPob(idNos, tPersonDo);			}			if (DUTY_RANK.equals(locationQo.getType())) {				if (tPersonDo.getJobGrade() != null) {					if (tPersonDo.getJobGrade().contains(INTEGRATED_MANAGMENT_CODE)) {						dutyRank = getAnalysisDutyRank(idNos, "综合管理");					} else if (tPersonDo.getJobGrade().contains(LAW_ENFORCEMENT_CODE)) {						dutyRank = getAnalysisDutyRank(idNos, "执法勤务");					} else if (tPersonDo.getJobGrade().contains(POLICING_TECHNIQUES_CODE)) {						dutyRank = getAnalysisDutyRank(idNos, "警务技术");					}				} else {					dutyRank = getAnalysisDutyRank(idNos, "全部");				}				if (tPersonDo.getJobGrade() != null) {					SgQueryCategoryDo sgQueryCategoryDo = sgQueryCategoryDao.							findByCvTypeAndCvFlag("AK", tPersonDo.getJobGrade());					locationVo.setMySelf(sgQueryCategoryDo.getCvName());				}				locationVo.setDutyRank(dutyRank);			}		}		return locationVo;	}	/**	 * @param idNos	 * @param idNo	 * @return 根据用户信息统计用户该部门和市局的学历情况	 */	private LocationVo getEducationCount(List<String> idNos, String idNo) {		LocationVo locationVo = new LocationVo();		String name = null;		List<String> idAllNos = new ArrayList<>(getAllIdNo());		Map<String, Map<String, Integer>> resultMap = new HashMap<>(10);		Map<String, Integer> mapall = getEducationByIdNos(idAllNos);		resultMap.put("市局", mapall);		if (idNos.size() < 1) {			//查询市局的数据			resultMap.put("部门", mapall);		} else {			Map<String, Integer> map = getEducationByIdNos(idNos);			resultMap.put("部门", map);		}		//查询自己的学历		TEducationDo tEducationDo = tEducationDao.				getFirst(idNo, "0");		String type = tEducationDo.getEducationalTitle();		if (StringUtils.isNotEmpty(type)) {			String typeChar = String.valueOf(type.charAt(0));			if (DOCTOR_CODE.equals(type)) {				name = "博士";			} else if (ONE.equals(typeChar)) {				name = "硕士";			} else if (TWO.equals(typeChar)) {				name = "本科";			} else if (THREE.equals(typeChar)) {				name = "大专";			} else {				name = "高中及以下";			}		}		locationVo.setMySelf(name);		locationVo.setEducation(resultMap);		return locationVo;	}	/**	 * @return 查询所有的身份证号	 */	private List<String> getAllIdNo() {		return childUnit.getSubPersonIdNos(NJSGAJ_ID);	}	public Map<String, Integer> getEducationByIdNos(List<String> idNos) {		return getEducationByIdNos(idNos,false);	}	/**	 * @param idNos	 * @return 根据ids得到教育信息	 */	public Map<String, Integer> getEducationByIdNos(List<String> idNos, Boolean all) {		Map<String, Integer> mapResult = new LinkedHashMap<>();		List<TEducationDo> tEducationDo = new ArrayList<>();		//根据人员身份证号查询学历信息		if (idNos.size() > ONE_THOUSAND) {			int listSize = idNos.size() / ONE_THOUSAND;			for (int i = 0; i < idNos.size() / ONE_THOUSAND; i++) {				tEducationDo.addAll(tEducationDao.getFirstByIdNo(idNos.subList(ONE_THOUSAND * i, ONE_THOUSAND * (i + 1)), "0"));			}			tEducationDo.addAll(tEducationDao.getFirstByIdNo(idNos.subList(ONE_THOUSAND * listSize, idNos.size()), "0"));		} else {			tEducationDo.addAll(tEducationDao.getFirstByIdNo(idNos, "0"));		}		//博士		int count1 = 0;		//硕士		int count2 = 0;		//本科		int count3 = 0;		//大专		int count4 = 0;		//高中及以下		int count5 = 0;		for (TEducationDo tEducation : tEducationDo) {			String type = tEducation.getEducationalTitle();			if (StringUtils.isNotEmpty(type)) {				if ("11001".equals(type)) {					count1 += 1;				} else if (type.charAt(0) == '1') {					count2 += 1;				} else if (type.charAt(0) == '2') {					count3 += 1;				} else if (type.charAt(0) == '3') {					count4 += 1;				} else {					count5 += 1;				}			}		}		if (count1 != 0 || all) {			mapResult.put("博士", count1);		}		if (count2 != 0 || all) {			mapResult.put("硕士", count2);		}		if (count3 != 0 || all) {			mapResult.put("本科", count3);		}		if (count4 != 0 || all) {			mapResult.put("大专", count4);		}		if (count5 != 0 || all) {			mapResult.put("高中及以下", count5);		}		return mapResult;	}	/**	 * 递归获取下级单位	 *	 * @param companies	 * @param unitIds	 */	private void getUnitIds(List<CompanyNew> companies, List<String> unitIds) {		for (CompanyNew company : companies) {			unitIds.add(company.getId());			if (company.getChildCompany() != null) {				getUnitIds(company.getChildCompany(), unitIds);			}		}	}	/**	 * @param idNos	 * @return 分析统计该人员在部门和市局的年龄信息	 */	private LocationVo getAnalysisAge(List<String> idNos, TPersonDo tPersonDo) {		LocationVo locationVo = new LocationVo();		String name = null;		String age = null;		Map<String, Map<String, Integer>> mapResult = new HashMap<>(10);		List<String> idAllNos = new ArrayList<>(getAllIdNo());		Map<String, Integer> ageAllMap = getAgeByIdNos(idAllNos);		mapResult.put("市局", ageAllMap);		if (idNos.size() < 1) {			mapResult.put("部门", ageAllMap);		} else {			mapResult.put("部门", getAgeByIdNos(idNos));		}		if (tPersonDo.getAge() != null) {			age = tPersonDo.getAge();		} else {			Date time;			try {				time = DateUtil.parse(tPersonDo.getBirthDay());				try {					age = String.valueOf(DateUtil.getAge(time));				} catch (Exception e) {					e.printStackTrace();				}			} catch (ParseException e) {				e.printStackTrace();			}		}		if (age != null) {			int age1 = Integer.parseInt(age);			if (age1 <= THIRTY_FIVE) {				name = "35岁及以下";			} else if (age1 <= FIFTY) {				name = "35-50（岁）";			} else {				name = "50岁及以上";			}		}		locationVo.setMySelf(name);		locationVo.setAge(mapResult);		return locationVo;	}	/**	 * 获取年龄统计	 *	 * @param idNos	 * @return	 */	private Map<String, Integer> getAgeByIdNos(List<String> idNos) {		Map<String, Integer> map = new HashMap<>(10);		AtomicInteger allSum1 = new AtomicInteger();		AtomicInteger allSum2 = new AtomicInteger();		AtomicInteger allSum3 = new AtomicInteger();		if (idNos.size() > 0) {			List<TPersonResult> tPersonDoList = new ArrayList<>();			if (idNos.size() > ONE_THOUSAND) {				int listSize = idNos.size() / 1000;				for (int i = 0; i < listSize; i++) {					tPersonDoList.addAll(tPersonDao.getAgesByIdNumber(idNos.subList(1000 * i, 1000 * (i + 1)), "0"));				}				tPersonDoList.addAll(tPersonDao.getAgesByIdNumber(idNos.subList(1000 * listSize, idNos.size()), "0"));			} else {				tPersonDoList.addAll(tPersonDao.getAgesByIdNumber(idNos, "0"));			}			if (tPersonDoList.size() > 0) {				tPersonDoList.forEach(f -> {					double ageDouble = Double.parseDouble(f.getBirthday());					int age1 = (new Double(ageDouble)).intValue();					int sum1 = f.getNum();					if (age1 <= THIRTY_FIVE) {						allSum1.addAndGet(sum1);					} else if (age1 <= FIFTY) {						allSum2.addAndGet(sum1);					} else if (age1 > FIFTY_ONE) {						allSum3.addAndGet(sum1);					}				});			}			if (allSum1.intValue() != 0) {				map.put("35岁及以下", allSum1.intValue());			}			if (allSum2.intValue() != 0) {				map.put("35-50（岁）", allSum2.intValue());			}			if (allSum3.intValue() != 0) {				map.put("50岁及以上", allSum3.intValue());			}		}		return map;	}	/**	 * @param deptIdNos	 * @param type	 * @return 职级统计	 */	private Map<String, Map<String, Integer>> getAnalysisDutyRank(List<String> deptIdNos, String type) {		Map<String, Map<String, Integer>> mapResult = new HashMap<>(10);		List<String> idAllNos = new ArrayList<>(getAllIdNo());		Map<String, Integer> ageAllMap = getDutyRank(idAllNos, type);		mapResult.put("市局", ageAllMap);		if (deptIdNos.size() < 1) {			mapResult.put("部门", ageAllMap);		} else {			mapResult.put("部门", getDutyRank(deptIdNos, type));		}		return mapResult;	}	/**	 * @param deptIdNos	 * @return 职级接口	 */	private Map<String, Integer> getDutyRank(List<String> deptIdNos, String type) {		List<TPersonDo> tPersonList = new ArrayList<>(getPersonByIdNos(deptIdNos));		tPersonList = tPersonList.stream().collect(				Collectors.collectingAndThen(						Collectors.toCollection(() -> new TreeSet<>(Comparator.comparing(TPersonDo::getIdNo))), ArrayList::new)		);		//赛选出合适的数据		Map<String, Long> mapList = selectDutyRankByType(tPersonList, type);		Map<String, Long> resultResult = new LinkedHashMap<>();		mapList.entrySet().stream()				.sorted(Map.Entry.comparingByKey())				.forEachOrdered(x -> resultResult.put(x.getKey(), x.getValue()));		String[] mast = {"01", "02"};		String[] place = {"03", "04", "05", "06"};		String[] level = {"07", "08", "09", "10"};		Map<String, Integer> listMast = new LinkedHashMap<>();		for (Map.Entry<String, Long> entry : resultResult.entrySet()) {			SgQueryCategoryDo sgQueryCategory = sgQueryCategoryDao.findByCvTypeAndCvFlag("AK", entry.getKey());			String mapKey = sgQueryCategory.getCvName();			int count = Integer.parseInt(String.valueOf(entry.getValue()));			if (count == 0) {				continue;			}			if ((Arrays.asList(place).contains(entry.getKey().substring(entry.getKey().length() - 2)))) {				listMast.put(mapKey, count);			} else if ((Arrays.asList(level).contains(entry.getKey().substring(entry.getKey().length() - 2)))) {				listMast.put(mapKey, count);			} else if ((Arrays.asList(mast).contains(entry.getKey().substring(entry.getKey().length() - 2)))) {				listMast.put(mapKey, count);			} else {				listMast.put(mapKey, count);			}		}		return listMast;	}	/**	 * @param tPersonList	 * @param type	 * @return 根据type筛选出合适的数据	 */	Map<String, Long> selectDutyRankByType(List<TPersonDo> tPersonList, String type) {		Map<String, Long> mapList = new LinkedHashMap<>();		if (ALL.equals(type)) {			//以下类似分组查询group by			mapList = tPersonList.					stream().					filter(f -> f.getJobGrade() != null && f.getJobGrade().contains("0060")).					sorted(Comparator.comparing(TPersonDo::getJobGrade)).					collect(Collectors.groupingBy(TPersonDo::getJobGrade, Collectors.counting()));		} else if (INTEGRATED_MANAGMENT.equals(type)) {			mapList = tPersonList.					stream().					filter(f -> f.getJobGrade() != null && f.getJobGrade().contains("00602")).					sorted(Comparator.comparing(TPersonDo::getJobGrade)).					collect(Collectors.groupingBy(TPersonDo::getJobGrade, Collectors.counting()));		} else if (LAW_ENFORCEMENT.equals(type)) {			mapList = tPersonList.					stream().					filter(f -> f.getJobGrade() != null && f.getJobGrade().contains("00604")).					sorted(Comparator.comparing(TPersonDo::getJobGrade)).					collect(Collectors.groupingBy(TPersonDo::getJobGrade, Collectors.counting()));		} else if (POLICING_TECHNIQUES.equals(type)) {			mapList = tPersonList.					stream().					filter(f -> f.getJobGrade() != null && f.getJobGrade().contains("00606")).					sorted(Comparator.comparing(TPersonDo::getJobGrade)).					collect(Collectors.groupingBy(TPersonDo::getJobGrade, Collectors.counting()));		}		return mapList;	}	/**	 * @param idNos	 * @return 警衔统计	 */	private LocationVo getAnalysisPoliceRank(List<String> idNos, TPersonDo tPersonDo) {		LocationVo locationVo = new LocationVo();		Map<String, Map<String, Long>> mapResult = new HashMap<>(10);		List<String> idAllNos = new ArrayList<>(getAllIdNo());		Map<String, Long> ageAllMap = getPoliceRankCount(idAllNos);		mapResult.put("市局", ageAllMap);		if (idNos.size() < 1) {			mapResult.put("部门", ageAllMap);		} else {			mapResult.put("部门", getPoliceRankCount(idNos));		}		if (tPersonDo.getPoliceRank() != null) {			SgQueryCategoryDo sgQueryCategoryDo = sgQueryCategoryDao.					findByCvTypeAndCvFlag("XA", tPersonDo.getPoliceRank());			locationVo.setMySelf(sgQueryCategoryDo.getCvName());		}		locationVo.setPoliceRank(mapResult);		return locationVo;	}	/**	 * @param idNos	 * @return 根据身份证号查询警衔	 */	@SuppressWarnings("unchecked")	private Map<String, Long> getPoliceRankCount(List<String> idNos) {		Map<String, Long> map;		List<TPersonDo> tPersonList = new ArrayList<>(getPersonByIdNos(idNos));		//分组统计各警衔人数		map = tPersonList.				stream().				filter(f -> f.getPoliceRank() != null && Integer.parseInt(f.getPoliceRank()) < 42).				collect(Collectors.groupingBy(TPersonDo::getPoliceRank, Collectors.counting()));		Map<String, Long> resultMap = new LinkedHashMap<>();		Stream<Map.Entry<String, Long>> st = map.entrySet().stream();		st.sorted(Comparator.comparing(Map.Entry::getKey)).forEachOrdered(e -> resultMap.put(e.getKey(), e.getValue()));		Map<String, Long> mapResult = new LinkedHashMap();		for (String key : resultMap.keySet()) {			if (map.get(key) != 0) {				mapResult.put(sgQueryCategoryDao.findByCvTypeAndCvFlag("XA", key).getCvName(), map.get(key));			}		}		return mapResult;	}	/**	 * 获取人员进入来源	 *	 * @param idNos	 * @return	 */	private Map<String, Integer> getSourceEntryCount(List<String> idNos) {		Map<String, Integer> result = new LinkedHashMap<>();		List<SourceAndCount> sourceAndCountList = new ArrayList<>();		if (idNos.size() > ONE_THOUSAND) {			int listSize = idNos.size() / 1000;			for (int i = 0; i < idNos.size() / ONE_THOUSAND; i++) {				sourceAndCountList.addAll(personalAnalysisMapper.						querySourceCount(idNos.subList(1000 * i, 1000 * (i + 1))));			}			sourceAndCountList.addAll(personalAnalysisMapper.querySourceCount(idNos.subList(1000 * listSize, idNos.size())));		} else {			sourceAndCountList.addAll(personalAnalysisMapper.querySourceCount(idNos));		}		for (SourceAndCount sourceAndCount : sourceAndCountList) {			String sourceName = sourceAndCount.getSourceName();			String schoolType = sourceAndCount.getSchoolType();			int count = sourceAndCount.getCount();			String finalSourceName = CommonUnit.getSourceName(sourceName);			//警察院校毕业生			boolean fromPoliceSchool = SOCIAL.equals(finalSourceName) && ("1".equals(schoolType) || "1003".equals(schoolType));			if (fromPoliceSchool) {				result.merge("警察院校毕业生", count, Integer::sum);			} else {				result.merge(finalSourceName, count, Integer::sum);			}		}		return result;	}	/**	 * @param idNos	 * @param idNo	 * @return 统计进入来源	 */	private LocationVo getAnalysisSource(List<String> idNos, String idNo) {		LocationVo locationVo = new LocationVo();		String name = null;		Map<String, Map<String, Integer>> mapResult = new HashMap<>(10);		List<String> idAllNos = new ArrayList<>(getAllIdNo());		Map<String, Integer> sourceAllMap = getSourceEntryCount(idAllNos);		mapResult.put("市局", sourceAllMap);		if (idNos.size() < 1) {			mapResult.put("部门", sourceAllMap);		} else {			mapResult.put("部门", getSourceEntryCount(idNos));		}		List<SourceAndCount> sourceAndCountList = personalAnalysisMapper.				querySourceCount(Arrays.asList(idNo));		if (sourceAndCountList.size() > 0) {			String sourceName = sourceAndCountList.get(0).getSourceName();			String finalSourceName = CommonUnit.getSourceName(sourceName);			//警察院校毕业生			boolean fromPoliceSchool = SOCIAL.equals(finalSourceName)					&& ("1".equals(sourceAndCountList.get(0).getSchoolType())					|| "1003".equals(sourceAndCountList.get(0).getSchoolType()));			if (fromPoliceSchool) {				name = "警察院校毕业生";			} else {				name = finalSourceName;			}		}		locationVo.setMySelf(name);		locationVo.setSource(mapResult);		return locationVo;	}	/**	 * @param idNos	 * @param idNos	 * @return 根据身份证号统计职务信息	 */	private LocationVo getAnalysisPob(List<String> idNos, TPersonDo tPersonDo) {		LocationVo locationVo = new LocationVo();		List<String> dutyStr = Arrays.asList(dutys);		Map<String, Map<String, Integer>> mapResult = new HashMap<>(10);		List<String> idAllNos = new ArrayList<>(getAllIdNo());		Map<String, Integer> posSubAllMap = getPosSubCount(getPersonByIdNos(idAllNos));		mapResult.put("市局", posSubAllMap);		if (idNos.size() < 1) {			mapResult.put("部门", posSubAllMap);		} else {			mapResult.put("部门", getPosSubCount(getPersonByIdNos(idNos)));		}		//判断自己是属于哪个职务		if (tPersonDo.getPoliceJobGrade() != null) {			if (dutyStr.contains(tPersonDo.getPoliceJobGrade())) {				SgQueryCategoryDo sgQueryCategoryDo = sgQueryCategoryDao.						findByCvTypeAndCvFlag("XG", tPersonDo.getPoliceJobGrade());				String dutyName = mergeDuty(sgQueryCategoryDo.getCvName());				locationVo.setMySelf(dutyName);			}		}		locationVo.setDuty(mapResult);		return locationVo;	}	/**	 * @param tPersonList	 * @return 根据身份证号统计职务	 */	Map<String, Integer> getPosSubCount(List<TPersonDo> tPersonList) {		Map<String, Integer> map = new LinkedHashMap<>();		//根据部门code查询职务信息		//正厅职		int count1 = 0;		//副厅职		int count2 = 0;		//副局职		int count3 = 0;		//副局职非领导		int count4 = 0;		//正处职		int count5 = 0;		//副处职		int count6 = 0;		//正科职		int count7 = 0;		//副科职		int count8 = 0;		//正处职及以上		int count9 = 0;		//副处职及以上		int count10 = 0;		for (TPersonDo tPerson : tPersonList) {			String type = tPerson.getPoliceJobGrade();			if (StringUtils.isNotEmpty(type)) {				switch (type) {					case "0925":					case "102":					case "10":						count8 += 1;						break;					case "0830":					case "0920":						count7 += 1;						break;					case "0730":					case "0820":						count6 += 1;						count10 += 1;						break;					case "0720":						count5 += 1;						count9 += 1;						count10 += 1;						break;					case "0717":					case "0718":						count4 += 1;						count9 += 1;						count10 += 1;						break;					case "0715":					case "0716":						count3 += 1;						count9 += 1;						count10 += 1;						break;					case "0620":						count2 += 1;						count9 += 1;						count10 += 1;						break;					case "0520":						count1 += 1;						count9 += 1;						count10 += 1;						break;					default:						break;				}			}		}		if (count1 != 0) {			map.put("正厅职", count1);		}		if (count2 != 0 ) {			map.put("副厅职", count2);		}		if (count3 != 0 ) {			map.put("副局职", count3);		}		if (count4 != 0 ) {			map.put("副局职非领导", count4);		}		if (count5 != 0 ) {			map.put("正处职", count5);		}		if (count6 != 0 ) {			map.put("副处职", count6);		}		if (count7 != 0 ) {			map.put("正科职", count7);		}		if (count8 != 0 ) {			map.put("副科职", count8);		}		if (count9 != 0 ) {			map.put("正处职及以上", count9);		}		if (count10 != 0 ) {			map.put("副处职及以上", count10);		}		return map;	}	/**	 * @param idNumber	 * @return 找位置描述	 */	public String getLocationImpression(String idNumber) {		String content = null;		List<String> idNos = new ArrayList<>();		SysUserDo sysUserDo = sysUserDao.findByIdentitynumAndDelStatusAndPostType(idNumber, "0", 0);		List<TPersonDo> tPersonDoList = new ArrayList<>();		if (sysUserDo != null) {			String deptId = sysUserDo.getDeptId();			if (URBAN.equals(deptId)) {				idNos.addAll(getAllIdNo());			} else {				//查询所有的子部门				idNos.addAll(childUnit.getSubPersonIdNos(deptId));			}			if (idNos.size() > ONE_THOUSAND) {				int listSize = idNos.size() / 1000;				for (int i = 0; i < idNos.size() / ONE_THOUSAND; i++) {					tPersonDoList.addAll(tPersonDao.findMaxAgePeoPle(idNos.subList(1000 * i, 1000 * (i + 1))));				}				tPersonDoList.addAll(tPersonDao.findMaxAgePeoPle(idNos.subList(1000 * listSize, idNos.size())));			} else {				tPersonDoList.addAll(tPersonDao.findMaxAgePeoPle(idNos));			}			//根据省份证号查询最大最小的年龄			if (tPersonDoList.size() > 0) {				int maxAge = Integer.parseInt(tPersonDoList.get(0).getAge());				int minAge = Integer.parseInt(tPersonDoList.get(tPersonDoList.size() - 1).getAge());				//查询自己的年龄				TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNumber, "0");				if (tPersonDo != null) {					int age = Integer.parseInt(tPersonDo.getAge());					if (age == maxAge) {						content = "我在部门内部是最资深的民警,那在分局、市局我是什么样的位置呢?";					} else if (age == minAge) {						content = "我在部门内部是最年轻的民警,那在分局、市局我是什么样的位置呢?";					} else {						content = "我在部门内部是中年民警,那在分局、市局我是什么样的位置呢?";					}				}			}		}		return content;	}	/**	 * 查询是男是女	 *	 * @param idNo	 * @return	 */	public String getSex(String idNo) {		//根据身份证号判断男女		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNo, "0");		if (tPersonDo != null) {			return "1".equals(tPersonDo.getSex()) ? "男" : "女";		}		return null;	}	/**	 * @param idNos	 * @return 根据身份正好获取tperson所对应的实体	 */	List<TPersonDo> getPersonByIdNos(List<String> idNos) {		List<TPersonDo> tPersonList = new ArrayList<>();		if (idNos.size() > ONE_THOUSAND) {			int listSize = idNos.size() / 1000;			for (int i = 0; i < idNos.size() / ONE_THOUSAND; i++) {				tPersonList.addAll(tPersonDao.findAllByDelStatusAndIdNoIn("0", idNos.subList(1000 * i, 1000 * (i + 1))));			}			tPersonList.addAll(tPersonDao.findAllByDelStatusAndIdNoIn("0", idNos.subList(1000 * listSize, idNos.size())));		} else {			tPersonList.addAll(tPersonDao.findAllByDelStatusAndIdNoIn("0", idNos));		}		return tPersonList;	}	/**	 * @param locationQo	 * @return 职位分析	 */	public JobAnalysisVo getJobAnalysis(LocationQo locationQo) {		JobAnalysisVo jobAnalysisVo = new JobAnalysisVo();		Map<String, Integer> map = new LinkedHashMap<>();		Map<String, Integer> map1 = new LinkedHashMap<>();		Map<String, String> map2 = new LinkedHashMap<>();		Map<String, String> map3 = new LinkedHashMap<>();		List<String> dateList = new ArrayList<>();		List<DutyAndYear> dutyAndYearList = new ArrayList<>();		List<DutyAndYear> dutyRankAndYearList = new ArrayList<>();		String name = " ";		String dutyRankName = "";		String dutyRank = "";		//根据身份证号查询民察的入时间		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(locationQo.getIdNumber(), "0");		if (tPersonDo != null) {			String personId = tPersonDo.getDataSourceId();			//入警时间			if (tPersonDo.getTimeToWorkPsb() != null) {				String startTime = tPersonDo.getTimeToWorkPsb().substring(0, 4);				String endTime = DateUtil.getCurrentYear();				dateList.addAll(DateUtil.getYears(startTime, endTime));				//统计该人获取的奖励				List<YearCount> yearCountList = personalAnalysisMapper.queryTcommenCount(locationQo.getIdNumber());				//统计该人培训数据				List<YearCount> yearCountList1 = personalAnalysisMapper.queryTrainCount(locationQo.getIdNumber());				if (DUTY.equals(locationQo.getType())) {					dutyAndYearList.addAll(personalAnalysisMapper.							queryDuty(locationQo.getIdNumber(), Arrays.asList(dutys)));				}				if (DUTY_RANK.equals(locationQo.getType())) {					if (tPersonDo.getJobGrade() != null) {						dutyRank = tPersonDo.getJobGrade().substring(0, 5);						String queyRank = dutyRank + "%";						dutyRankAndYearList.addAll(personalAnalysisMapper.								queryDutyRank(personId, queyRank));					}				}				if (dateList.size() > 0) {					final String[] finalName = {name};					final String[] finalDutyRankName = {dutyRankName};					dateList.forEach(v -> {						map.put(v, 0);						map1.put(v, 0);						if (yearCountList.size() > 0) {							yearCountList.forEach(f -> {								if (v.equals(f.getYear())) {									map.put(v, f.getCount());								}							});						}						if (yearCountList1.size() > 0) {							yearCountList1.forEach(y -> {								if (v.equals(y.getYear())) {									map1.put(v, y.getCount());								}							});						}						if (dutyAndYearList.size() > 0) {							map2.put(v, finalName[0]);							dutyAndYearList.forEach(d -> {								if (v.equals(d.getYear())) {									map2.put(v, mergeDuty(d.getCvName()));									finalName[0] = mergeDuty(d.getCvName());								}							});						}						if (dutyRankAndYearList.size() > 0) {							map3.put(v, finalDutyRankName[0]);							for (DutyAndYear dutyAndYear : dutyRankAndYearList) {								if (v.equals(dutyAndYear.getYear())) {									map3.put(v, dutyAndYear.getCvName());									finalDutyRankName[0] = dutyAndYear.getCvName();								}							}						}					});				}			}		}		jobAnalysisVo.setReward(map);		jobAnalysisVo.setTraining(map1);		if (DUTY.equals(locationQo.getType())) {			jobAnalysisVo.setDuty(map2);			jobAnalysisVo.setColumn(dutyName);		} else if (DUTY_RANK.equals(locationQo.getType())) {			jobAnalysisVo.setDuty(map3);			if (StringUtils.isNotBlank(dutyRank)) {				if (POLICING_TECHNIQUES_CODE.equals(dutyRank)) {					jobAnalysisVo.setColumn(Arrays.asList(dutyRanks3));				}				if (LAW_ENFORCEMENT_CODE.equals(dutyRank)) {					jobAnalysisVo.setColumn(Arrays.asList(dutyRanks2));				}				if (INTEGRATED_MANAGMENT_CODE.equals(dutyRank)) {					jobAnalysisVo.setColumn(Arrays.asList(dutyRanks1));				}			}		}		jobAnalysisVo.setRow(dateList);		return jobAnalysisVo;	}	/**	 * 勇争先	 *	 * @param idNumber	 * @return	 */	public String getToBeTheBest(String idNumber) {		//根据身份证号查询		int years = 0;		Date time;		int count = 0;//        int assessmentYear = 0;		String content = "";//        int flag = 0;		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNumber, "0");		if (tPersonDo.getTimeToWorkPsb() != null) {//            String beginTime = tPersonDo.getTimeToWorkPsb().substring(0, 7).replaceAll("-", "年");			try {				time = DateUtil.parse(tPersonDo.getTimeToWorkPsb());				years = DateUtil.getAge(time);			} catch (Exception e) {				e.printStackTrace();			}			String queryTime = tPersonDo.getTimeToWorkPsb().substring(0, 10);			//计算年份			List<String> tResumeInfoDoList = tResumeInfoDao.					findAllByIdNoAndDelStatusAndStartingDateAfter(idNumber, 0, queryTime);			if (tResumeInfoDoList.size() > 0) {				count = tResumeInfoDoList.size();			}			content = content + "自入警" + years + "以来,共就职于" + count + "个单位";			//判断考核是否是优秀//            List<YearCount> yearCountList = personalAnalysisMapper.queryAssessment(idNumber);//            int assessmentCount = 0;//            if (yearCountList.size() > 0) {//                flag = 1;//                for (YearCount yearCount : yearCountList) {//                    assessmentCount = yearCount.getCount() + assessmentCount;//                }//                List<String> yearsList = new ArrayList<>();//                yearCountList.forEach(c -> yearsList.add(c.getYear()));//                Collections.sort(yearsList);//                assessmentYear = calMaxLength(yearsList);//            }//            if (flag == 1 && assessmentYear == 0) {//                assessmentYear = 1;//            }//            if (assessmentYear > 0) {//                content += ",连续" + assessmentYear + "年度考核优秀";//            }		}		return content;	}//    private int calMaxLength(List<String> yearList) {//        int max = 0;//        int temp = 1;////        for (int i = 1; i < yearList.size(); i++) {//            int pre = Integer.parseInt(yearList.get(i - 1));//            int now = Integer.parseInt(yearList.get(i));//            //如果是连续字符串，长度加一//            if (now - pre == 1) {//                temp++;//            } else {//                max = (max > temp ? max : temp);//                temp = 1;//            }//        }//        max = (max > temp ? max : temp);//        return max == 1 ? 0 : max;//    }	/**	 * @param idNumber	 * @return	 * @description: 根据人员身份证号查询勇争先标签	 */	public List<ToBeTheBestLabelVo> getToBeTheBestLabel(String idNumber) {		List<ToBeTheBestLabelVo> toBeTheBestLabelVoList = new ArrayList<>();		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNumber, "0");		if (tPersonDo.getTimeToWorkPsb() != null) {			String startTime = tPersonDo.getTimeToWorkPsb().substring(0, 10).replaceAll("-", "");			List<TResumeInfoDo> tResumeInfoDoList = tResumeInfoDao.					findAllByIdNoAndDelStatus(idNumber, 0, startTime);			removeList(tResumeInfoDoList, toBeTheBestLabelVoList);		}		/**		 判断是否修改过		 */		BeTheBestInfoEntity beTheBestInfoEntity = beTheBestInfoRepository.findByIdNoAndDelstatusAndActive(idNumber, "0",CommonUnit.active);		if(beTheBestInfoEntity !=null){			BeTheBestEntity example  = new BeTheBestEntity();			example.setInfoId(beTheBestInfoEntity.getId());			example.setActive(CommonUnit.active);			List<BeTheBestEntity> beTheBestEntities = beTheBestRepository.findAll(Example.of(example));			Map<String, List<BeTheBestEntity>> groupByDelstatus = beTheBestEntities.stream().collect(Collectors.groupingBy(a -> a.getDelstatus(), Collectors.toList()));			List<BeTheBestEntity> deleteList = groupByDelstatus.get("1");			if(deleteList !=null){				Set<String> deleteTimes = new HashSet<>(deleteList.stream().map(a -> a.getTime()).collect(Collectors.toList()));				Iterator<ToBeTheBestLabelVo> iterator = toBeTheBestLabelVoList.iterator();				while (iterator.hasNext()){					ToBeTheBestLabelVo next = iterator.next();					if(deleteTimes.contains(next.getTime())){						iterator.remove();					}				}			}			Map<String, BeTheBestEntity> bestEntityMap = groupByDelstatus.get("0").stream().collect(Collectors.toMap(a -> a.getTime(), a -> a));			for (ToBeTheBestLabelVo vo : toBeTheBestLabelVoList) {				BeTheBestEntity entity = bestEntityMap.get(vo.getTime());				if(entity !=null){					vo.setAssess(entity.getAssess());					vo.setTime(entity.getTime());					vo.setDeptName(entity.getDeptName());					vo.setDutyChange(entity.getDutyChange());					vo.setHonor(entity.getHonor());					vo.setExtra(entity.getExtra());					vo.setId(entity.getId());				}				bestEntityMap.remove(vo.getTime());			}			for (Map.Entry<String, BeTheBestEntity> entry : bestEntityMap.entrySet()) {				BeTheBestEntity entity = entry.getValue();				ToBeTheBestLabelVo vo = new ToBeTheBestLabelVo();				vo.setAssess(entity.getAssess());				vo.setTime(entity.getTime());				vo.setDeptName(entity.getDeptName());				vo.setDutyChange(entity.getDutyChange());				vo.setHonor(entity.getHonor());				vo.setExtra(entity.getExtra());				vo.setId(entity.getId());				toBeTheBestLabelVoList.add(vo);			}		}		toBeTheBestLabelVoList.sort(Comparator.comparing(ToBeTheBestLabelVo::getTime).reversed());		return toBeTheBestLabelVoList;	}	/**	 * 移除数据	 *	 * @param tResumeInfoDoList	 */	private void removeList(List<TResumeInfoDo> tResumeInfoDoList,							List<ToBeTheBestLabelVo> toBeTheBestLabelVoList) {		List<TResumeInfoDo> tResumeInfoDoList1 = new ArrayList<>();		if (tResumeInfoDoList.size() > 0) {			int s = getSameOrgName(tResumeInfoDoList, tResumeInfoDoList.get(0).getOrgName());			int size = tResumeInfoDoList.size();			for (int i = 0; i < size; i++) {				if (i < s) {					tResumeInfoDoList1.add(tResumeInfoDoList.get(0));					tResumeInfoDoList.remove(0);				}			}		}		if (tResumeInfoDoList1.size() > 0) {			toBeTheBestLabelVoList.addAll(getTobeTheBestVo(tResumeInfoDoList1));			removeList(tResumeInfoDoList, toBeTheBestLabelVoList);		}	}	/**	 * 查询接处警和案件	 *	 * @param idNo	 * @return	 */	public List<JcjVo> getJcj(String idNo) {		List<JcjVo> jcjVoList = new ArrayList<>();		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNo, "0");		List<String> dateList = new ArrayList<>();		if (tPersonDo != null) {			//入警时间			if (tPersonDo.getTimeToWorkPsb() != null) {				String startTime = tPersonDo.getTimeToWorkPsb().substring(0, 4);				String endTime = DateUtil.getCurrentYear();				dateList.addAll(DateUtil.getYears(startTime, endTime));			}		}		List<JcjVo> jcjVoList1 = satisfiedDataSevice.getJcjAndMylDataByYear(idNo);		if (dateList.size() > 0) {			dateList.forEach(v -> {				JcjVo jcjVo = new JcjVo();				jcjVo.setYear(v);				jcjVo.setAj(0);				jcjVo.setJcj(0);				jcjVo.setAccountedFoJcj("0");				jcjVo.setAccountedForAj("0");				if (jcjVoList1.size() > 0) {					jcjVoList1.forEach(j -> {						if (v.equals(j.getYear())) {							jcjVo.setAj(j.getAj());							jcjVo.setJcj(j.getJcj());							jcjVo.setAccountedFoJcj(j.getAccountedFoJcj());							jcjVo.setAccountedForAj(j.getAccountedForAj());						}					});				}				jcjVoList.add(jcjVo);//                String start = v + "01";//                String end = v + "12";//                int queryStart = Integer.parseInt(start);//                int queryEnd = Integer.parseInt(end) + 1;//                OpinionAndJcjVo opinionAndJcjVo = satisfiedDataSevice.getJcjAndMylData(idNo, queryStart, queryEnd);//                if(opinionAndJcjVo !=null) {//                    jcjVo.setJcj(opinionAndJcjVo.getJcj());//                    jcjVo.setAj(opinionAndJcjVo.getAj());//                    int allJcj = opinionAndJcjVo.getAllJcj();//                    //算比例//                    if (allJcj != 0) {//                        double jcjAccount = (double) opinionAndJcjVo.getJcj() / (double) allJcj;//                        jcjVo.setAccountedFoJcj(String.valueOf(jcjAccount*100));//                    } else {//                        double jcjAccount = 0;//                        jcjVo.setAccountedFoJcj(String.valueOf(jcjAccount));//                    }////                    int allAj = opinionAndJcjVo.getAllAj();//                    if (allAj != 0) {//                        double ajAccount = (double) opinionAndJcjVo.getAj() / (double) allAj;//                        jcjVo.setAccountedForAj(String.valueOf(ajAccount*100));//                    } else {//                        double ajAccount = 0;//                        jcjVo.setAccountedForAj(String.valueOf(ajAccount));//                    }//                    jcjVoList.add(jcjVo);//                }			});		}		return jcjVoList;	}	/**	 * 满意度	 *	 * @param idNo	 * @return	 */	public OpinionPersonVo getPersonOpinion(String idNo) {		OpinionPersonVo opinionPersonVo = new OpinionPersonVo();		TPersonDo tPersonDo = tPersonDao.findByIdNoAndDelStatus(idNo, "0");		List<String> list = new ArrayList<>();		if (tPersonDo != null) {			//入警时间			if (tPersonDo.getTimeToWorkPsb() != null) {				list.addAll(DateUtil.getYears(tPersonDo.getTimeToWorkPsb().substring(0, 4), DateUtil.getCurrentYear()));			}		}		List<JcjVo> jcjVoList = satisfiedDataSevice.getJcjAndMylDataByYear(idNo);		List<OpinionVo> opinionVoList = new ArrayList<>();		if (list.size() > 0) {			list.forEach(v -> {				OpinionVo opinionVo = new OpinionVo();				opinionVo.setYear(v);				opinionVo.setOpinion(0.0);				if (jcjVoList.size() > 0) {					jcjVoList.forEach(j -> {						if (v.equals(j.getYear())) {							opinionVo.setOpinion(j.getOpinion());						}					});				}//                String queryStart = v +"01";//                String queryEnd = v+ "12";//                int queryStartTime = Integer.parseInt(queryStart);//                int queryEndTime = Integer.parseInt(queryEnd);//                OpinionAndJcjVo opinionAndJcjVo = satisfiedDataSevice.getJcjAndMylData(idNo,queryStartTime,queryEndTime);//                if(opinionAndJcjVo !=null) {//                    Double opion = Double.parseDouble(opinionAndJcjVo.getMyd());//                    opinionVo.setOpinion(opion);//                }else {//                    opinionVo.setOpinion(0.0);//                }				opinionVoList.add(opinionVo);			});		}		opinionPersonVo.setOpinionVoList(opinionVoList);		List<OpinionVo> opinionVoList1 = opinionVoList.stream().filter(v -> v.getOpinion() > 0).collect(Collectors.toList());		if (opinionVoList1.size() > 0) {			double max = opinionVoList1.stream().mapToDouble(OpinionVo::getOpinion).max().getAsDouble();			opinionPersonVo.setMaxOpinion(max);			double min = opinionVoList1.stream().mapToDouble(OpinionVo::getOpinion).min().getAsDouble();			opinionPersonVo.setMinOpinion(min);			double average = opinionVoList1.stream().mapToDouble(OpinionVo::getOpinion).average().getAsDouble();			opinionPersonVo.setAgeOpinion(average);		}		return opinionPersonVo;	}	private int getSameOrgName(List<TResumeInfoDo> tResumeInfoDoList, String name) {		int result = 0;		for (int i = 0; i < tResumeInfoDoList.size(); i++) {			if (name.equals(tResumeInfoDoList.get(i).getOrgName())) {				result = i + 1;			} else {				result = i;				break;			}		}		return result;	}	/**	 * 勇争先标签	 *	 * @param tResumeInfoDoList	 * @return	 */	private List<ToBeTheBestLabelVo> getTobeTheBestVo(List<TResumeInfoDo> tResumeInfoDoList) {		List<ToBeTheBestLabelVo> toBeTheBestLabelVoList = new ArrayList<>();		if (tResumeInfoDoList.size() > 0) {			ToBeTheBestLabelVo toBeTheBestLabelVo = new ToBeTheBestLabelVo();			toBeTheBestLabelVo.setDeptName(tResumeInfoDoList.get(0).getOrgName());			if (tResumeInfoDoList.get(0).getStartingDate() != null) {				String dataTime = String.valueOf(tResumeInfoDoList.get(0).getStartingDate());				String year = dataTime.substring(0, 4);				String month = dataTime.substring(5, 7);				toBeTheBestLabelVo.setTime(year + month);				int queryStart = Integer.parseInt(year + month);				int size = tResumeInfoDoList.size() - 1;				String endTime;				if (tResumeInfoDoList.get(size).getClosingDate() != null) {					endTime = String.valueOf(tResumeInfoDoList.get(size).getClosingDate()).substring(0, 10);				} else {					Date d = new Date();					SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");					endTime = sdf.format(d);				}				String endTimeYear = endTime.substring(0, 4);				String endTimeMonth = endTime.substring(5, 7);				int queryEnd = Integer.parseInt(endTimeYear + endTimeMonth);				//请求民意110的数据				OpinionAndJcjVo opinionAndJcjVo =						satisfiedDataSevice.getJcjAndMylData(tResumeInfoDoList.get(0).getIdNo(), queryStart, queryEnd);				if (opinionAndJcjVo != null) {					int jcjCount = opinionAndJcjVo.getJcj();					int ajCount = opinionAndJcjVo.getXsAj();					PersonAnalysisVo personAnalysisVo = new PersonAnalysisVo();					if (jcjCount != 0) {						personAnalysisVo.setJq(jcjCount);					}					if (ajCount != 0) {						personAnalysisVo.setXzaj(ajCount);					}					if (StringUtils.isNotBlank(opinionAndJcjVo.getMyd())) {						personAnalysisVo.setMymyd(opinionAndJcjVo.getMyd());					}					toBeTheBestLabelVo.setOpinion(personAnalysisVo);				}				//查询工作变动				List<DutyAndYear> dutyAndYearList = personalAnalysisMapper.queryDutyByTime(tResumeInfoDoList.get(0).getIdNo(),						year + month, endTimeYear + endTimeMonth);				if (dutyAndYearList.size() > 0) {					StringBuilder dutyContent = new StringBuilder();					for (DutyAndYear d : dutyAndYearList) {						String dutyYear = d.getYear().substring(0, 4);						String dutyMonth = d.getYear().substring(5, 7);						dutyContent.append(dutyYear).append("年").append(dutyMonth).append("月").append(",任").append(d.getCvName()).append(",");					}					String dutyContent1 = dutyContent.toString();					if (dutyContent1.trim().endsWith(",")) {						dutyContent1 = dutyContent1.substring(0, dutyContent1.length() - 1);					}					toBeTheBestLabelVo.setDutyChange(dutyContent1);				}				//查询考核考核优秀的年份				List<AssessAndYear> yearsList = personalAnalysisMapper.						queryAssessmentByYearAndIdNo(tResumeInfoDoList.get(0).getIdNo(), year, endTime.substring(0, 4));				StringBuilder content = new StringBuilder();				if (yearsList.size() > 0) {					Map<String, Long> map1 = yearsList.stream().collect(Collectors.groupingBy(AssessAndYear::getGrade, Collectors.counting()));					for (Map.Entry<String, Long> entry : map1.entrySet()) {						String mapKey = entry.getKey();						//优秀良好						SgQueryCategoryDo sgQueryCategoryDo = sgQueryCategoryDao.								findByCvTypeAndCvFlag("CC", mapKey);						Long mapValue = entry.getValue();						content.append("共").append(mapValue).append("年年度考核").append(sgQueryCategoryDo.getCvName()).append(",");					}				}				if (content.toString().trim().endsWith(",")) {					content = new StringBuilder(content.substring(0, content.length() - 1));				}				toBeTheBestLabelVo.setAssess(content.toString());				//查询奖励				List<RewardAndCount> rewardAndCountList = personalAnalysisMapper.						queryHornorByYearAndIdNo(tResumeInfoDoList.get(0).getIdNo(), dataTime.substring(0, 10), endTime);				PersonAnalysisVo personAnalysisVo = personalAnalysisMapper.						queryOpinion(tResumeInfoDoList.get(0).getIdNo(), year + month, endTime.replaceAll("-", ""));				//如果有奖励				if (rewardAndCountList.size() > 0) {					List<RewardAndCount> resultList = getRewardSort(rewardAndCountList);					StringBuilder rewardContent = new StringBuilder();					for (RewardAndCount rewardAndCount : resultList) {						rewardContent.append("获得").append(rewardAndCount.getAward()).								append(rewardAndCount.getCount()).append("次").append(",").append(" ");					}					String rewardContent1 = rewardContent.toString();					if (rewardContent1.trim().endsWith(",")) {						rewardContent1 = rewardContent1.substring(0, rewardContent1.length() - 2);					}					toBeTheBestLabelVo.setHonor(rewardContent1);				}				//如果有满意度				if (personAnalysisVo != null) {					toBeTheBestLabelVo.setOpinion(personAnalysisVo);				}			}			toBeTheBestLabelVoList.add(toBeTheBestLabelVo);		}		return toBeTheBestLabelVoList;	}	/**	 * 奖励排序	 *	 * @param rewardAndCountList	 * @return	 */	private List<RewardAndCount> getRewardSort(List<RewardAndCount> rewardAndCountList) {		List<RewardAndCount> resultList = new ArrayList<>();		//分组比较		List<RewardAndCount> listOne = new ArrayList<>(), listTwo = new ArrayList<>(), listThree = new ArrayList<>();		List<List<RewardAndCount>> sortOne = new ArrayList<>(), sortTwo = new ArrayList<>(), sortThree = new ArrayList<>();		//第一组排序list		for (int i = 0; i < 7; i++) {			sortOne.add(new ArrayList<>());		}		//第二组排序list		for (int i = 0; i < 4; i++) {			sortTwo.add(new ArrayList<>());		}		//第三组排序list		for (int i = 0; i < 8; i++) {			sortThree.add(new ArrayList<>());		}		//一等功、二等功、三等功		List<RewardAndCount> firstLevel = new ArrayList<>(), secondLevel = new ArrayList<>(), thirdLevel = new ArrayList<>();		//其他奖励		List<RewardAndCount> otherList = new ArrayList<>();		//比较结果		List<RewardAndCount> resultOne = new ArrayList<>(), resultTwo = new ArrayList<>(), resultThree = new ArrayList<>();		rewardAndCountList.forEach(v -> {			if (personRewordOne.contains(v.getAward())) {				listOne.add(v);			} else if (personRewordTwo.contains(v.getAward())) {				listTwo.add(v);			} else if (personRewordThree.contains(v.getAward())) {				listThree.add(v);			} else if (v.getAward().contains(FIRST_LEVEL)) {				firstLevel.add(v);			} else if (v.getAward().contains(SECOND_LEVEL)) {				secondLevel.add(v);			} else if (v.getAward().contains(THIRD_LEVEL)) {				thirdLevel.add(v);			} else {				otherList.add(v);			}		});		while (listOne.size() > 0) {			for (RewardAndCount a : listOne) {				if ("革命烈士".equals(a.getAward())) {					sortOne.get(0).add(a);					listOne.remove(a);					break;				} else if ("全国公安系统一级英雄模范".equals(a.getAward())) {					sortOne.get(1).add(a);					listOne.remove(a);					break;				} else if ("全国公安系统二级英雄模范".equals(a.getAward())) {					sortOne.get(2).add(a);					listOne.remove(a);					break;				} else if ("全国劳模".equals(a.getAward())) {					sortOne.get(3).add(a);					listOne.remove(a);					break;				} else if ("全国特级优秀人民警察".equals(a.getAward())) {					sortOne.get(4).add(a);					listOne.remove(a);					break;				} else if ("全国优秀人民警察".equals(a.getAward())) {					sortOne.get(5).add(a);					listOne.remove(a);					break;				} else if ("全国三八红旗手".equals(a.getAward())) {					sortOne.get(6).add(a);					listOne.remove(a);					break;				} else {					listOne.remove(a);					break;				}			}		}		sortOne.forEach(resultOne::addAll);		while (listTwo.size() > 0) {			for (RewardAndCount a : listTwo) {				if ("省劳模".equals(a.getAward())) {					sortTwo.get(0).add(a);					listTwo.remove(a);					break;				} else if ("省三八红旗手".equals(a.getAward())) {					sortTwo.get(1).add(a);					listTwo.remove(a);					break;				} else if ("省五四青年奖章".equals(a.getAward())) {					sortTwo.get(2).add(a);					listTwo.remove(a);					break;				} else if ("江苏好青年".equals(a.getAward())) {					sortTwo.get(3).add(a);					listTwo.remove(a);					break;				} else {					listTwo.remove(a);					break;				}			}		}		sortTwo.forEach(resultTwo::addAll);		while (listThree.size() > 0) {			for (RewardAndCount a : listThree) {				if ("市劳动模范".equals(a.getAward())) {					sortThree.get(0).add(a);					listThree.remove(a);					break;				} else if ("省优秀共青团干部".equals(a.getAward())) {					sortThree.get(1).add(a);					listThree.remove(a);					break;				} else if ("省优秀共青团员".equals(a.getAward())) {					sortThree.get(2).add(a);					listThree.remove(a);					break;				} else if ("感动南京年度人物".equals(a.getAward())) {					sortThree.get(3).add(a);					listThree.remove(a);					break;				} else if ("市三八红旗手".equals(a.getAward())) {					sortThree.get(4).add(a);					listThree.remove(a);					break;				} else if ("市十大杰出青年".equals(a.getAward())) {					sortThree.get(5).add(a);					listThree.remove(a);					break;				} else if ("市五四青年奖章".equals(a.getAward())) {					sortThree.get(6).add(a);					listThree.remove(a);					break;				} else if ("市最美老干部".equals(a.getAward())) {					sortThree.get(7).add(a);					listThree.remove(a);					break;				} else {					listThree.remove(a);					break;				}			}		}		sortThree.forEach(resultThree::addAll);		resultList.addAll(resultOne);		resultList.addAll(firstLevel);		resultList.addAll(resultTwo);		resultList.addAll(secondLevel);		resultList.addAll(resultThree);		resultList.addAll(thirdLevel);		resultList.addAll(otherList);		return resultList;	}}