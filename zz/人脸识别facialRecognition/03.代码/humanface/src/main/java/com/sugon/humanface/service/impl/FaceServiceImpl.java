package com.sugon.humanface.service.impl;import java.sql.Connection;import java.sql.DriverManager;import java.sql.ResultSet;import java.sql.SQLException;import java.sql.Statement;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import javax.annotation.Resource;import org.springframework.stereotype.Service;import com.sugon.humanface.service.FaceService;import com.sugon.humanface.util.mysql.MysqlJdbcUtil;import com.sugon.humanface.util.mysql.MysqlProperties;import com.sugon.humanface.utils.JsonUtil;import lombok.extern.slf4j.Slf4j;@Slf4j@Servicepublic class FaceServiceImpl implements FaceService{    @Resource    private MysqlJdbcUtil mysqlJdbcUtil;    @Resource    private MysqlProperties mysqlProperties;    @Override    public String getUserInfo(String no) {        Map<String,Object> map = new HashMap<String,Object>();        Statement st = null;        ResultSet rs = null;        map.put("key", "人脸识别成功");        Connection con = mysqlJdbcUtil.get();        try {            st = con.createStatement();            //对识别人进行信息的更新操作            try {                insertOrUpdate(st,no);            } catch (ParseException e) {                e.printStackTrace();            }            String sql = " SELECT id,name,sex,birthday,idcardno,address,workday,noworkday,overtime,noovertime,overtime1,overtime2,overtime3,overtime4,logintime FROM face where id = "+no+" ";            rs = st.executeQuery(sql);            if(rs.next()) {                map.put("id", rs.getString(1));                map.put("name", rs.getString(2));                map.put("sex", rs.getString(3));                map.put("birthday", rs.getString(4));                map.put("idcardno", rs.getString(5));                map.put("address", rs.getString(6));                map.put("workday", rs.getString(7));                map.put("noworkday", rs.getString(8));                map.put("overtime", rs.getString(9));                map.put("noovertime", rs.getString(10));                map.put("overtime1", rs.getString(11));                map.put("overtime2", rs.getString(12));                map.put("overtime3", rs.getString(13));                map.put("overtime4", rs.getString(14));            }            List<Map<String,Object>> list = new ArrayList<Map<String,Object>>();            st.clearBatch();            ResultSet rs1 = st.executeQuery(" SELECT bgurl,content,dt,address FROM renyuanguiji WHERE id = "+no+" order by dt asc ");            while(rs1.next()) {                Map<String,Object> guiji = new HashMap<String,Object>();                guiji.put("bgurl", rs1.getString(1));                guiji.put("content", rs1.getString(2));                guiji.put("dt", rs1.getString(3));                guiji.put("address", rs1.getString(4));                list.add(guiji);            }            st.clearBatch();            ResultSet faceCount = st.executeQuery(" SELECT count from facecount where id = '1' ");            Integer count = 0;            if(faceCount.next()) {                count = faceCount.getInt(1);                count += 1;            }            st.executeUpdate(" update facecount set count = '"+count+"' where id = '1' ");            map.put("facecount",""+count+"");            map.put("guiji", JsonUtil.listToJson(list));            //关系人            st.clearBatch();            ResultSet relpeople = st.executeQuery(" select people1,people2,people3,people4,people5,people6,people7,people8,people9,people10,people11,people12,people13,people14,people15,people16,people17,people18,people19 from people where id = '"+no+"' ");            Map<String,String> peoplemap = new HashMap<String,String>();            if(relpeople.next()) {                peoplemap.put("people1", relpeople.getString(1));                peoplemap.put("people2", relpeople.getString(2));                peoplemap.put("people3", relpeople.getString(3));                peoplemap.put("people4", relpeople.getString(4));                peoplemap.put("people5", relpeople.getString(5));                peoplemap.put("people6", relpeople.getString(6));                peoplemap.put("people7", relpeople.getString(7));                peoplemap.put("people8", relpeople.getString(8));                peoplemap.put("people9", relpeople.getString(9));                peoplemap.put("people10", relpeople.getString(10));                peoplemap.put("people11", relpeople.getString(11));                peoplemap.put("people12", relpeople.getString(12));                peoplemap.put("people13", relpeople.getString(13));                peoplemap.put("people14", relpeople.getString(14));                peoplemap.put("people15", relpeople.getString(15));                peoplemap.put("people16", relpeople.getString(16));                peoplemap.put("people17", relpeople.getString(17));                peoplemap.put("people18", relpeople.getString(18));                peoplemap.put("people19", relpeople.getString(19));            }            map.put("people", JsonUtil.mapToJson(peoplemap));        } catch (SQLException e) {            log.error(e.getMessage(),e);        }finally{            if(null != rs) {                try {                    rs.close();                } catch (SQLException e) {                    log.error(e.getMessage(),e);                }            }            if(null != st) {                try {                    st.close();                } catch (SQLException e) {                    log.error(e.getMessage(),e);                }            }            if(null != con) {                try {                    con.close();                } catch (SQLException e) {                    log.error(e.getMessage(),e);                }            }        }        return JsonUtil.mapToJson(map);    }    @Override    public Integer getFaceCount() {        Connection con = null;        Statement st = null;        ResultSet rs = null;        Integer count = 0;        try {            Class.forName(mysqlProperties.getDriver());            con = DriverManager.getConnection(mysqlProperties.getUrl(), mysqlProperties.getUsername(), mysqlProperties.getPassword());            st = con.createStatement();            String sql = " SELECT count FROM facecount where id = '1' ";            rs = st.executeQuery(sql);            if(rs.next()) {                count = rs.getInt(1);            }        }        catch(Exception e) {            log.error(e.getMessage(),e);        }finally {            if(null != rs) {                try {                    rs.close();                } catch (SQLException e) {                    log.error(e.getMessage(),e);                }            }            if(null != st) {                try {                    st.close();                } catch (SQLException e) {                    log.error(e.getMessage(),e);                }            }            if(null != con) {                try {                    con.close();                } catch (SQLException e) {                    log.error(e.getMessage(),e);                }            }        }        return count;    }    /**     * 更新face表和轨迹表数据     * @param rs     * @param st     * @throws ParseException     * @throws SQLException     */    public void insertOrUpdate(Statement st1,String no) throws ParseException, SQLException {        String sql = " SELECT id,name,sex,birthday,idcardno,address,workday,noworkday,overtime,noovertime,overtime1,overtime2,overtime3,overtime4,logintime FROM face where id = "+no+" ";        ResultSet rs = st1.executeQuery(sql);        SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");        SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");        Calendar c = Calendar.getInstance();        String dayTime = df.format(new Date());        Random rand = new Random();        String startwork = dayTime.substring(0, 6)+"01";        Connection con = mysqlJdbcUtil.get();        Statement st = con.createStatement();        try {            //判断轨迹表是否有该id的数据            ResultSet result = null;            //对表做更新            while(rs.next()) {                if(rs.getString(15)!= null && !"".equals(rs.getString(15))) {                    if(!dayTime.equals(rs.getString(15))) {                        //不是第一次识别，需要做出勤和加班时间更新                        boolean isSameMonth = df.parse(rs.getString(15)).getMonth()==df.parse(dayTime).getMonth();                        int dutyDay = isSameMonth?getDutyDays(rs.getString(15),dayTime):getDutyDays(startwork,dayTime);//工作日天数                        if(isSameMonth) {                            int workday = Integer.parseInt(rs.getString(7))+dutyDay;                            int overtime = workday *3;                            String updatesql = "update face set overtime="+overtime+",workday="+workday+",logintime = "+dayTime+" where id = "+rs.getString(1);                            st.execute(updatesql);                        }else {                            int withoutDay = dutyDay>5?rand.nextInt(5):0;                            int workday = dutyDay>5?dutyDay-rand.nextInt(5):dutyDay;                            int overtime = workday *3;                            int withouttime = withoutDay*3;                            String updatesql = "update face set noovertime="+withouttime+",overtime="+overtime+",workday="+workday+",noworkday="+withoutDay+",logintime = "+dayTime+" where id = "+rs.getString(1);                            st.execute(updatesql);                        }                        //更新轨迹信息                        if(getDutyDays(rs.getString(15),dayTime)>10) {                            //插入轨迹表                            result = st.executeQuery("select * from renyuanguiji where id = "+rs.getString(1)+" order by dt asc");                            if(result.getRow()>0) {                                con.setAutoCommit(false);                                int initnum=3;                                while(result.next()) {                                    initnum += rand.nextInt(5);                                    c.setTime(new Date());                                    c.add(Calendar.DATE, -initnum);                                    String day = format.format(c.getTime())+" "+(rand.nextInt(14) + 10)+":"+(rand.nextInt(50) + 10)+":"+(rand.nextInt(50) + 10);                                    st.addBatch("update renyuanguiji set dt = '"+day+"' where bgurl='"+result.getString(2)+"'and id='"+result.getString(1)+"'and content='"+result.getString(3)+"'and address='"+result.getString(5)+"'");                                }                                st.executeBatch();                                con.commit();                            }                        }                    }                }else if(rs.getString(15)== null || "".equals(rs.getString(15))){                    //如果第一次登陆，插入face表登陆时间,新增期中的出勤和加班时间信息                    int dutyDay = getDutyDays(startwork,dayTime);//工作日天数                    int withoutDay = dutyDay>5?rand.nextInt(5):0;                    int workday = dutyDay>5?dutyDay-rand.nextInt(5):dutyDay;                    int overtime = workday *3;                    int withouttime = withoutDay*3;                    String updatesql = "update face set overtime4="+rand.nextInt(10)*3+",overtime3="+rand.nextInt(10)*3+",overtime2="+rand.nextInt(10)*3+",overtime1="+rand.nextInt(10)*3+",noovertime="+withouttime+",overtime="+overtime+",workday="+workday+",noworkday="+withoutDay+",logintime = "+dayTime+" where id = "+rs.getString(1);                    st.execute(updatesql);                    //插入轨迹表                    result = st.executeQuery("select * from renyuanguiji where id = "+rs.getString(1)+" order by dt asc");                    if(result.next()) {                        con.setAutoCommit(false);                        int initnum=3;                        while(result.next()) {                            initnum += rand.nextInt(5);                            c.setTime(new Date());                            c.add(Calendar.DATE, -initnum);                            String day = format.format(c.getTime())+" "+(rand.nextInt(14) + 10)+":"+(rand.nextInt(50) + 10)+":"+(rand.nextInt(50) + 10);                            st.addBatch("update renyuanguiji set dt = '"+day+"' where bgurl='"+result.getString(2)+"'and id='"+result.getString(1)+"'and content='"+result.getString(3)+"'and address='"+result.getString(5)+"'");                        }                        st.executeBatch();                        con.commit();                    }                }            }            con.setAutoCommit(true);        } catch (SQLException e) {            log.error(e.getMessage(),e);        }    }    @SuppressWarnings("deprecation")    public int getDutyDays(String strStartDate,String strEndDate) {        SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");        Date startDate=null;        Date endDate = null;        try {            startDate=df.parse(strStartDate);            endDate = df.parse(strEndDate);        } catch (ParseException e) {            System.out.println("非法的日期格式,无法进行转换");            log.error(e.getMessage(),e);        }        int result = 0;        while (startDate.compareTo(endDate) <= 0) {            if (startDate.getDay() != 6 && startDate.getDay() != 0)                result++;            startDate.setDate(startDate.getDate() + 1);        }        return result;    }    public static void main(String args[]){//		FaceServiceImpl face = new FaceServiceImpl();//		int result = face.getDutyDays("20181201", "20181210");//		System.out.println("====");        Random rand = new Random();//		int ms;//		ms = rand.nextInt(1000000);//		Date date = new Date(ms);//		SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");//		for(int i=0 ;i<10;i++) {//			System.out.println(rand.nextInt(50) + 10);//		}    }}